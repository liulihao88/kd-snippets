{
  /* 自动生成代码片段的网站 snippet-generator.app.  使用用法(vscode): ctrl + shift + p --> 首选项:配置用户代码片段(Preferences: Configure User Snippets) --> 新代码片段. 复制当前文档所有代码 */
  "vueC简写": {
    "prefix": "vueC简写",
    "body": [
      "<template>",
      "  <div111>",
      "    <div>${0:${TM_FILENAME_BASE}}</div>",
      "  </div111>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"${TM_FILENAME_BASE/(.)/${1:/upcase}/}\",",
      "  components: {",
      "     ",
      "  },",
      "  props: {},",
      "  data() {",
      "    return {",
      "       ",
      "    }",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  created() {},",
      "  mounted() {},",
      "  methods: {",
      "",
      "  }",
      "}",
      "</script>",
      "<style scoped lang=\"scss\">",
      "",
      "</style>",
      ""
    ],
    "description": "vue custom template自定义模板"
  },
  "vueV简写": {
    "prefix": "vueV简写",
    "body": [
      "<template>",
      "  <div>",
      "    <div>${0:${TM_FILENAME_BASE}}</div>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"${TM_FILENAME_BASE/(.)/${1:/upcase}/}\",",
      "  components: {},",
      "  props: {},",
      "  data() {",
      "    return {",
      "      tStr: \"\"",
      "    };",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  created() {",
      "    this.init();",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    init() {}",
      "  }",
      "};",
      "</script>",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": "vue custom 常用自定义模板"
  },
  "beforeRouteEnter": {
    "prefix": "beforeRouteEnter简写",
    "scope": "javascript, ts, vue-html, html",
    "body": [
      "  beforeRouteEnter(to, from, next) {",
      "    next(vm=>{});",
      "  },"
    ],
    "description": [
      "beforeRouteEnter 函数内部 this 是undefined，这是因为在执行路由钩子函数beforRouteEnter时候，组件还没有被创建出来；先执行beforRouteEnter，再执行组件周期钩子函数beforeCreate。我们可以通过 next 获取组件的实例对象，如：next( (vm)=>{} )，参数vm就是组件的实例化对象"
    ],
  },
  "vueDrawer": {
    "prefix": "vueDrawer简写",
    "body": [
      "<template>",
      "  <div>",
      "    <kd-drawer",
      "      ref=\"drawerRef\"",
      "      title=\"${0:${TM_FILENAME_BASE}}\"",
      "      sub-title=\"${RELATIVE_FILEPATH/src\\/views\\///}\"",
      "      :visible.sync=\"isShow\"",
      "      @confirm=\"confirm\"",
      "    >",
      "      <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\">",
      "        <el-form-item label=\"名称\" prop=\"name\">",
      "          <kd-input v-model=\"form.name\" />",
      "        </el-form-item>",
      "      </el-form>",
      "    </kd-drawer>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"${TM_FILENAME_BASE/(.)/${1:/upcase}/}\",",
      "  components: {},",
      "  props: {},",
      "  data() {",
      "    return {",
      "      isShow: false,",
      "      type: \"add\",",
      "      form: {",
      "        name: \"\"",
      "      },",
      "      originForm: {},",
      "      rules: {",
      "        name: [this.mBlurRequired()]",
      "      }",
      "    };",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  created() {",
      "    this.originForm = this.\\$pub.deepClone(this.form);",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    isDev() {",
      "      if (this.mIsDev) {",
      "        this.form = {",
      "          name: this.\\$pub.uuid()",
      "        };",
      "      }",
      "    },",
      "    open(row) {",
      "      if (row) {",
      "        this.type = \"edit\";",
      "        this.form = Object.assign(this.originForm, row);",
      "      } else {",
      "        this.type = \"add\";",
      "        this.form = this.\\$pub.deepClone(this.originForm);",
      "        this.isDev();",
      "      }",
      "      this.isShow = true;",
      "    },",
      "    async confirm() {",
      "      await this.mValidForm();",
      "      this.isShow = false;",
      "      this.\\$emit(\"update\");",
      "     }",
      "  }",
      "};",
      "</script>",
      "<style scoped lang=\"scss\"></style>",
    ],
    "description": "vueDrawer简写"
  },
  "vueElTable": {
    "prefix": "vueElTable简写",
    "scope": "",
    "body": [
      "<template>",
      "  <div>",
      "    <el-table :data=\"tableData\" style=\"width: 100%\">",
      "      <el-table-column prop=\"date\" label=\"日期\" width=\"180\"> </el-table-column>",
      "      <el-table-column prop=\"name\" label=\"姓名\" width=\"180\"> </el-table-column>",
      "      <el-table-column prop=\"address\" label=\"地址\"> </el-table-column>",
      "    </el-table>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"Test2\",",
      "  components: {},",
      "  props: {},",
      "  data() {",
      "    return {",
      "      tableData: [",
      "        {",
      "          date: \"2016-05-02\",",
      "          name: \"王小虎\",",
      "          address: \"上海市普陀区金沙江路 1518 弄上海市普陀区金\"",
      "        },",
      "        {",
      "          date: \"2016-05-04\",",
      "          name: \"王小虎\",",
      "          address: \"上海市普陀区金沙江路 1517 弄\"",
      "        },",
      "        {",
      "          date: \"2016-05-01\",",
      "          name: \"王小虎\",",
      "          address: \"上海市普陀区金沙江路 1519 弄\"",
      "        },",
      "        {",
      "          date: \"2016-05-03\",",
      "          name: \"王小虎\",",
      "          address: \"上海市普陀区金沙江路 1516 弄\"",
      "        }",
      "      ]",
      "    };",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  created() {},",
      "  mounted() {},",
      "  methods: {}",
      "};",
      "</script>",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": [
      "vueElTable简写"
    ],
  },
  "vueDrawerDetail": {
    "prefix": "vueDrawerDetail简写",
    "body": [
      "<template>",
      "  <div>",
      "    <kd-drawer",
      "      ref=\"drawerRef\"",
      "      title=\"${1:${TM_FILENAME_BASE}}\"",
      "      sub-title=\"${RELATIVE_FILEPATH/src\\/views\\///}\"",
      "      type=\"detail\"",
      "      :visible.sync=\"isShow\"",
      "    >",
      "      <el-descriptions :column=\"1\">",
      "        <el-descriptions-item label=\"左侧\">右侧</el-descriptions-item>",
      "      </el-descriptions>",
      "    </kd-drawer>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"${TM_FILENAME_BASE/(.)/${1:/upcase}/}\",",
      "  data() {",
      "    return {",
      "      isShow: true,",
      "    };",
      "  },",
      "  methods: {",
      "    open() {",
      "      this.isShow = true;",
      "    },",
      "  },",
      "};",
      "</script>",
      "<style scoped lang=\"scss\"></style>",
    ],
    "description": "vueDrawerDetail简写"
  },
  /*  自定义$.ajax方法 */
  // "ajax quick generate": {
  //   "scope": "javascript,typescript",
  //   "prefix": "ajax",
  //   "body": [
  //     "$.ajax({",
  //     "\ttype : '${1|GET,POST,PUT,DELETE,UPDATE|}',",
  //     "\tcontentType: '${2:application/json;charset=UTF-8}',",
  //     "\turl: '${3: http://127.0.0.1/admin/list}',",
  //     "\tdata: ${4|[],{}|},",
  //     "\tsuccess: (${5:res}) => {",
  //     "\t\tconsole.log(${5:res}, '$5');",
  //     "\t},",
  //     "\terror: (${6:err}) => {",
  //     "\t\tconsole.error(${6:err}, '${6:err}');",
  //     "\t},",
  //     "});",
  //     "$0"
  //   ],
  //   "description": "$.ajax quick generate"
  // },
  /* console.log 加this */
  "log with this": {
    "scope": "javascript,typescript",
    "prefix": "clt",
    "body": [
      "console.log(`${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} this.${1:${CLIPBOARD}}`,this.${1:${CLIPBOARD}});$0"
    ],
    "description": "log with this"
  },
  /* console.error double */
  "log error double": {
    "scope": "javascript,typescript",
    "prefix": "cle",
    "body": [
      "console.error('${1:defaultVal}', ${1:defaultVal})$0"
    ],
    "description": "console.error double加变量名"
  },
  /* 最基础的console.log */
  "log primary": {
    "scope": "javascript,typescript",
    "prefix": "clp",
    "body": [
      "console.log(${1:${CLIPBOARD}});$0"
    ],
    "description": "最基础console.log"
  },
  /*  醒目的色彩提示console.log 蓝色 */
  "log color": {
    "scope": "javascript,typescript",
    "prefix": "c",
    "body": [
      "console.log(`${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}}`, ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log蓝色代码"
  },
  /*  醒目的色彩提示console.log 蓝色 */
  "log color2": {
    "scope": "javascript,typescript",
    "prefix": "clc",
    "body": [
      "console.log(`%c${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}}`, 'background:#fff;color:blue', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log蓝色代码"
  },
  /*  醒目的色彩提示console.log 红色  */
  "log red color": {
    "scope": "javascript,typescript",
    "prefix": "clr",
    "body": [
      "console.log(`%c${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}}`, 'background:#fff;color:red', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log红色代码"
  },
  "log purple color": {
    "scope": "javascript,typescript",
    "prefix": "cll",
    "body": [
      "console.log(`${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log在一行打印"
  },
  /*  醒目的色彩提示console.log 绿色 */
  "log green color": {
    "scope": "javascript,typescript",
    "prefix": "clg",
    "body": [
      "console.log(`%c${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}}`, 'background:#fff;color:green', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log绿代码"
  },
  /*  醒目的色彩提示console.log  */
  "log yellow color": {
    "scope": "javascript,typescript",
    "prefix": "cly",
    "body": [
      "console.log(`%c${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}}`, 'background:#fff;color:yellow;', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log彩色代码"
  },
  "log base": {
    "scope": "javascript,typescript",
    "prefix": "cc",
    "body": [
      "console.log(`${1:${CLIPBOARD}}`, ${1:${CLIPBOARD}});$0"
    ],
    "description": "log_blue"
  },
  /*  醒目的色彩提示console.log  */
  "log blue": {
    "scope": "javascript,typescript",
    "prefix": "cli",
    "body": [
      "console.log(`%c ${1:${CLIPBOARD}} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} `, 'background:#fff;color:blue;font-size:2em;', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "log_blue"
  },
  "log 1": {
    "scope": "javascript,typescript",
    "prefix": "cl1",
    "body": [
      "console.log(`%c 11${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 1"
  },
  "log q": {
    "scope": "javascript,typescript",
    "prefix": "clq",
    "body": [
      "console.log(`%c qq${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 1"
  },
  "log 2": {
    "scope": "javascript,typescript",
    "prefix": "cl2",
    "body": [
      "console.log(`%c 22${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 2"
  },
  "log 3": {
    "scope": "javascript,typescript",
    "prefix": "cl3",
    "body": [
      "console.log(`%c 33${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 3"
  },
  "log 4": {
    "scope": "javascript,typescript",
    "prefix": "cl4",
    "body": [
      "console.log(`%c 44${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 4"
  },
  "log 5": {
    "scope": "javascript,typescript",
    "prefix": "cl5",
    "body": [
      "console.log(`%c 55${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 5"
  },
  "log 6": {
    "scope": "javascript,typescript",
    "prefix": "cl6",
    "body": [
      "console.log(`%c 66${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 6"
  },
  "log 7": {
    "scope": "javascript,typescript",
    "prefix": "cl7",
    "body": [
      "console.log(`%c 77${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 7"
  },
  "log 8": {
    "scope": "javascript,typescript",
    "prefix": "cl8",
    "body": [
      "console.log(`%c 88${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 8"
  },
  "log 9": {
    "scope": "javascript,typescript",
    "prefix": "cl9",
    "body": [
      "console.log(`%c 99${RANDOM/[0-9]{4}//} ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///} ${1:${CLIPBOARD}} `, 'background:#000;color:#ba5', ${1:${CLIPBOARD}});",
      "$0"
    ],
    "description": "console 9"
  },
  "log左半边": {
    "scope": "javascript,typescript",
    "prefix": "ch",
    "body": [
      "console.log($0"
    ],
    "description": "console.log("
  },
  "对象的打印": {
    "prefix": "clo简写",
    "scope": "javascript,typescript",
    "body": [
      "console.log(`${RANDOM/[0-9]{4}//}***** ${1:${CLIPBOARD}} ***** ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///}  `);",
      "console.log(JSON.stringify(${1:${CLIPBOARD}}, null, '\\t'));",
      "$0"
    ],
    "description": "console 9"
  },
  "打中文": {
    "scope": "javascript,typescript",
    "prefix": "clz",
    "body": [
      "console.log(`***** ${1:99999}  ${TM_LINE_NUMBER}行 ${RELATIVE_FILEPATH/src\\/views\\///}  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}`);",
      "$0"
    ],
    "description": "console 9"
  },
  "ll": {
    "scope": "",
    "prefix": "ll查看当前文件路径",
    "body": [
      "/**",
      "${TM_DIRECTORY}",
      "${1:${RELATIVE_FILEPATH/src\\/views\\///}}$0",
      "*/"
    ],
    "description": "查看当前文件路径"
  },
  "bs简写": {
    "prefix": "bs简写",
    "scope": "scss,css",
    "body": [
      "box-sizing: border-box;$0"
    ],
    "description": "box-sizing:border-box"
  },
  "fs简写": {
    "prefix": "fs简写",
    "scope": "scss,css",
    "body": [
      "font-size: ${1:12}px;$0"
    ],
    "description": "box-sizing:border-box"
  },
  "d": {
    "scope": "javascript,typescript,vue",
    "prefix": "debugger简写",
    "body": [
      "debugger;$0"
    ],
    "description": "debugger简写"
  },
  "disabled简写": {
    "scope": "html, vue-html",
    "prefix": "disabled简写",
    "body": [
      "disabled"
    ],
    "description": "disabled简写"
  },
  "return": {
    "scope": "javascript,typescript,vue",
    "prefix": "return",
    "body": [
      "return $0"
    ],
    "description": "add return"
  },
  "用户信息": {
    // prefix: 在编辑器中输入的此内容时，在编辑器建议中会显示该片段。
    "prefix": "author",
    // TM_FILENAME_BASE : 当前文件名
    // CURRENT_YEAR ： 年（4位数）  CURRENT_YEAR_SHORT：年（2位数）  CURRENT_MONTH：月  CURRENT_DATE：日
    // CURRENT_HOUR ：小时  CURRENT_MINUTE ：分钟 CURRENT_SECOND：秒
    "body": [
      "/**",
      "* 用户信息",
      "* @文件 ${TM_FILENAME_BASE}",
      "* ! author: andy凌云",
      "* ? description: ${1:无}",
      "* TODO: since: 创建时间  ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/$0"
    ],
    // 描述说明，在片段说明中会显示此字段的文本内容。
    "description": "Insert description."
  },
  "wxjs": {
    "scope": "javascript,typescript",
    "prefix": "wx",
    "body": [
      "const app = getApp()",
      "Page({",
      "\tdata: {",
      "\t\t$1",
      "\t},",
      "\tonShow() {",
      "\t\t$2",
      "\t},",
      "\tonReady() {",
      "\t\t$3",
      "\t},",
      "\t$4",
      "$0",
      "})"
    ],
    "description": "微信小程序代码片段"
  },
  "db": {
    "prefix": "db",
    "scope": "vue-html, html",
    "body": [
      "<${1:div}>$2</${1:div}>$0"
    ],
    "description": "插入html"
  },
  "w1": {
    "prefix": "w1",
    "scope": "",
    "body": [
      "width: 100%;",
      "$0"
    ],
    "description": "width: 100%"
  },
  "pr": {
    "prefix": "pr",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}:{",
      "\ttype: ${2|String,Number,Boolean,Object,Array,Function|},",
      "\tdefault: ${3|\"\",true,false,()=>{},()=>[]|},",
      "},",
      "$0"
    ],
    "description": "custom prop"
  },
  "prs": {
    "prefix": "prs",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}: {",
      "\ttype: String,",
      "\tdefault: \"\"",
      "},",
      "$0"
    ],
    "description": "prop string"
  },
  "pra": {
    "prefix": "pra",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}: {",
      "\ttype: Array,",
      "\tdefault: () => []",
      "},",
      "$0"
    ],
    "description": "prop array"
  },
  "prn": {
    "prefix": "prn",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}: {",
      "\ttype: Number,",
      "},",
      "$0"
    ],
    "description": "prop array"
  },
  "prb": {
    "prefix": "prb",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}: {",
      "\ttype: Boolean,",
      "\tdefault: ${2:true}",
      "},",
      "$0"
    ],
    "description": "prop boolean"
  },
  "pro": {
    "prefix": "pro",
    "scope": "javascript,vue,typescript",
    "body": [
      "${1:${CLIPBOARD}}: {",
      "\ttype: Object,",
      "\tdefault: () => {}",
      "},",
      "$0"
    ],
    "description": "prop object"
  },
  "vf": {
    "prefix": "vf",
    "scope": "vue-html, html",
    "body": [
      "<div v-for=\"(v,i) in ${1:${CLIPBOARD}}\" :key=\"i\" class=\"item\">",
      "\t<div>{{${2:v}}}</div>",
      "</div>$0"
    ],
    "description": "vue的for循环"
  },
  "cmd": {
    "prefix": "cmd",
    "scope": "javascript, typescript",
    "body": [
      "/**",
      "* @描述",
      "* ${1:}",
      "* @使用方法",
      "  ${2:}",
      "* @param",
      "* ${3:}",
      "*/"
    ],
    "description": "自定义文件注释"
  },
  "zs": {
    "prefix": "zs",
    "scope": "",
    "body": [
      "/**",
      " * $1",
      " * @description $2",
      " * @property {String} $3",
      " * @event {Function} $4",
      " * @example $5",
      " */"
    ],
    "description": "自定义文件注释"
  },
  "cmdt": {
    "prefix": "cmdt",
    "scope": "",
    "body": [
      "/**",
      "* @param {*} url 请求接口",
      "* @param {*} params 请求参数",
      "* @param {*} method 请求方式 GET / POST",
      "* @param {*} contentType 内容类型",
      "* @param {*} needLoading  是否需要loading",
      "* @param {*} needIntercept  是否需要添加拦截",
      "*/"
    ],
    "description": "自定义文件注释"
  },
  "package-help": {
    "prefix": "package-help简写",
    "scope": "",
    "body": [
      "c",
    ],
    "description": [
      " \"serve\": \"vue-cli-service serve\",",
      " \"dev\": \"vue-cli-service serve\",",
      " \"build\": \"vue-cli-service build\",",
      " \"build:prod\": \"vue-cli-service build\",",
      " \"lint\": \"eslint --fix --ext .js,.vue src\",",
      " \"preview\": \"node build/index.js --preview\",",
      " \"updateKd\": \"npm uninstall @kd/components && npm install @kd/components\",",
      " \"updateKdUtils\": \"npm uninstall @kd/utils && npm install @kd/utils\",",
      " \"prettier\": \"prettier --write \\\"src/**/*.{js,vue,scss,,ts,tsx,css}\\\"\",",
      " \"svgo\": \"svgo -f src/icons/svg --config=src/icons/svgo.yml\",",
      " \"deploy\": \"sh -x  deploy.sh\",",
      " \"deploy:k\": \"sh -x  deploy.sh -k\",",
      " \"deploy102\": \"sh -x  deploy102.sh\",",
      " \"deploy102:k\": \"sh -x  deploy102.sh -k\",",
      " \"deploy244\": \"sh -x  deploy244.sh\",",
      " \"deploy244:k\": \"sh -x  deploy244.sh -k\",",
      " \"deploy250\": \"sh -x  deploy250.sh\",",
      " \"deploy250:k\": \"sh -x  deploy250.sh -k\",",
      " \"deploy205244\": \"npm-run-all -s deploy deploy244:k\",",
      " \"deployAll\": \"npm-run-all -s deploy deploy244:k deploy250:k deploy102:k\",",
      " \"deployAll2\": \"sh -x deploy.sh && sh -x deploy244.sh -k && sh -x deploy250.sh -k && sh -x deploy102.sh -k\""
    ],
  },
  "gFunc-help": {
    "prefix": "gFunc-help简写",
    "scope": "",
    "body": [
      "this.\\$pub.${1|uuid,deepClone,$toast,judgeType,isEmpty,parseTime,setStorage,getStorage,clearStorage,debounce,getDates,checkForm,validateForm,sleep|}(${2});"
    ],
    "description": [
      "import { Message } from 'element-ui';",
      "import _ from 'lodash';",
      "",
      "// 全局的提示， 注册到全局 使用方法 $toast('成功提示', 's')",
      "export function $toast(str, type = 's', otherParams = {}) {",
      "  let handleType = type;",
      "  if (type === 's') {",
      "    handleType = 'success';",
      "  } else if (type === 'i') {",
      "    handleType = 'info';",
      "  } else if (type === 'e') {",
      "    handleType = 'error';",
      "  } else if (type === 'w') {",
      "    handleType = 'warning';",
      "  }",
      "  Message({",
      "    message: str,",
      "    type: handleType,",
      "    ...otherParams,",
      "  });",
      "}",
      "",
      "export function deepClone(arr) {",
      "  return _.cloneDeep(arr);",
      "}",
      "",
      "/**",
      " * 生成随机数, 第一个参数可传字符串, 空 或者数组",
      " * uuid(\"名字\") => 名字hc8f",
      " * uuid() => abcd",
      " * uuid('time') => 25MR 10-27 17:34:01",
      " * uuid('time', 0, {startStr:'andy', timeStr:\"{h}:{i}:{s}\"}) => andy 17:38:23",
      " * uuid('phone') => 13603312460",
      " * uuid('email') => cBZA@qq.com",
      " * uuid('number') => 2319",
      " * uuid([ { label: \"小泽泽\", value: \"xzz\" },{ label: \"小月月\", value: \"xyy\" }]) => xzz",
      " */",
      "export function uuid(",
      "  type = '',",
      "  length = 4,",
      "  { emailStr = '@qq.com', timeStr = '{m}-{d} {h}:{i}:{s}', startStr = '' } = {}",
      ") {",
      "  let randomStr = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';",
      "  let res = type;",
      "  // 如果传的第一个参数的数组， 说明是下拉框。 下拉框获取的是数组的第一项的值",
      "  if (judgeType(type) === 'array') {",
      "    return type[0][length === 4 ? 'value' : length];",
      "  }",
      "  // 如果是手机号, 生成随机手机号",
      "  if (type === 'phone') {",
      "    let prefixArray = new Array('130', '131', '132', '133', '135', '136', '137', '138', '170', '187', '189');",
      "    let i = parseInt(10 * Math.random());",
      "    let res = prefixArray[i];",
      "    for (var j = 0; j < 8; j++) {",
      "      res = res + Math.floor(Math.random() * 10);",
      "    }",
      "    return res;",
      "  }",
      "  // 如果是email, 生成随机email",
      "  if (type === 'email') {",
      "    return uuid(startStr, length) + emailStr;",
      "  }",
      "  // 如果是时间, 生成时间字符串",
      "  if (type === 'time') {",
      "    return uuid(startStr, length) + ' ' + parseTime(new Date(), timeStr);",
      "  }",
      "  // 如果是数字, 生成除了0的随机数字",
      "  if (type === 'number') {",
      "    let randomStr = '123456789';",
      "    let res = '';",
      "    for (let i = length; i > 0; --i) {",
      "      res += randomStr[Math.floor(Math.random() * randomStr.length)];",
      "    }",
      "    return Number(res);",
      "  }",
      "  for (let i = length; i > 0; --i) {",
      "    res += randomStr[Math.floor(Math.random() * randomStr.length)];",
      "  }",
      "  return res;",
      "}",
      "",
      "/**",
      " * 判断传入参数的类型",
      " * @param {*} type",
      " * judgeType(new RegExp()) regexp",
      " * judgeType(new Date()) date",
      " * judgeType([]) array",
      " * judgeType({}) object",
      " * judgeType(null) null",
      " * judgeType(123) number",
      " */",
      "export function judgeType(type) {",
      "  if (typeof type === 'object') {",
      "    const objType = Object.prototype.toString.call(type).slice(8, -1).toLowerCase();",
      "    return objType;",
      "  } else {",
      "    return typeof type;",
      "  }",
      "}",
      "",
      "/**",
      " * 判断变量是否空值",
      " * undefined, null, '', '   ', false, 0, [], {} 均返回true，否则返回false",
      " */",
      "export function isEmpty(v) {",
      "  switch (typeof v) {",
      "    case 'undefined':",
      "      return true;",
      "    case 'string':",
      "      if (v.trim().length === 0) return true;",
      "      break;",
      "    case 'boolean':",
      "      if (!v) return true;",
      "      break;",
      "    case 'number':",
      "      if (0 === v) return true;",
      "      break;",
      "    case 'object':",
      "      if (null === v) return true;",
      "      if (undefined !== v.length && v.length === 0) return true;",
      "      for (var k in v) {",
      "        return false;",
      "      }",
      "      return true;",
      "  }",
      "  return false;",
      "}",
      "",
      "/**",
      " * 格式化时间为年月日时分秒的格式， 格式可以自定义。",
      " * ① 时间戳10位和13位都可以转换成格式化的日期",
      " * ② java8格式的日期和有效的日期都可以转换成定义的日期格式",
      " * @param {Date, string}  都有默认参数",
      " * @example",
      " * parseTime() // 2020-07-17 09:53:07",
      " * parseTime('2018-02-13T06:17') // 2018-02-13 06:17:00",
      " * parseTime('2020/03/02 06:02') // 2020-03-02 06:02:00",
      " * parseTime(1541927611000); //2018-11-11 17:13:21",
      " * parseTime(1541927611000, \"{y}年{m}月{d}日 {h}时{m}分{s}秒\"); // 2018年11月11日 17时11分31秒",
      " * parseTime(1541927611, \"{y}/{m}/{d} {h}:{m}:{s}\"); // 2018/11/11 17:11:31",
      " * parseTime(new Date()); //2018-11-11 17:13:21",
      " * parseTime(new Date().getTime()); //2018-11-11 17:13:21",
      " */",
      "",
      "export function parseTime(time = new Date(), cFormat = '{y}-{m}-{d} {h}:{i}:{s}') {",
      "  let date;",
      "  if (typeof time === 'object') {",
      "    date = time;",
      "  } else {",
      "    if (('' + time).length === 10) time = parseInt(time) * 1000;",
      "    date = new Date(time);",
      "  }",
      "  const formatObj = {",
      "    y: date.getFullYear(),",
      "    m: date.getMonth() + 1,",
      "    d: date.getDate(),",
      "    h: date.getHours(),",
      "    i: date.getMinutes(),",
      "    s: date.getSeconds(),",
      "    a: date.getDay(),",
      "  };",
      "  const time_str = cFormat.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {",
      "    let value = formatObj[key]; // Note: getDay() returns 0 on Sunday",
      "    if (key === 'a') {",
      "      return ['日', '一', '二', '三', '四', '五', '六'][value];",
      "    }",
      "    if (result.length > 0 && value < 10) {",
      "      value = '0' + value;",
      "    }",
      "    return value || 0;",
      "  });",
      "  return time_str;",
      "}",
      "",
      "export function setStorage(str, params, isLocalStorage = false) {",
      "  let handleParams;",
      "  if (typeof params === 'number' || typeof params === 'string') {",
      "    handleParams = params;",
      "  } else {",
      "    handleParams = JSON.stringify(params);",
      "  }",
      "  if (isLocalStorage) {",
      "    localStorage.setItem(str, handleParams);",
      "  } else {",
      "    sessionStorage.setItem(str, handleParams);",
      "  }",
      "}",
      "",
      "export function getStorage(data) {",
      "  // 先获取localStorage数据, 如果没有再获取sessionStorage数据。 如果都没有， null;",
      "  let getLocalData = localStorage.getItem(data);",
      "  let getSessionData = sessionStorage.getItem(data);",
      "  if (getLocalData) {",
      "    try {",
      "      if (data !== 'curProject') {",
      "        getLocalData = JSON.parse(getLocalData);",
      "      }",
      "    } catch (e) {",
      "      // console.error(e);",
      "    }",
      "    return getLocalData;",
      "  } else if (getSessionData) {",
      "    try {",
      "      if (data !== 'curProject') {",
      "        getSessionData = JSON.parse(getSessionData);",
      "      }",
      "    } catch (e) {",
      "      // console.error(e);",
      "    }",
      "    return getSessionData;",
      "  }",
      "  return null;",
      "}",
      "",
      "export function clearStorage(str) {",
      "  if (!str) {",
      "    sessionStorage.clear();",
      "    localStorage.clear();",
      "    return;",
      "  }",
      "  sessionStorage.removeItem(str);",
      "  localStorage.removeItem(str);",
      "}",
      "",
      "/**",
      " * @desc 防抖",
      " * @param func",
      " * @param wait",
      " * @param immediate",
      " * @returns {function(...[*]): *}",
      " */",
      "export const debounce = (func, wait, immediate) => {",
      "  var timeout, result;",
      "  return function(...args) {",
      "    if (timeout) {",
      "      clearTimeout(timeout);",
      "    }",
      "",
      "    if (immediate && !timeout) {",
      "      result = func.apply(this, args);",
      "    }",
      "",
      "    timeout = setTimeout(() => {",
      "      result = func.apply(this, args);",
      "    }, wait);",
      "",
      "    return result;",
      "  };",
      "};",
      "",
      "// 获取当前日期前三十天的所有日期",
      "export const getDates = () => {",
      "  var myDate = new Date();",
      "  var nowY = myDate.getFullYear();",
      "  var nowM = myDate.getMonth() + 1;",
      "  var nowD = myDate.getDate();",
      "  var enddate = nowY + '-' + (nowM < 10 ? '0' + nowM : nowM) + '-' + (nowD < 10 ? '0' + nowD : nowD); //当前日期",
      "  //获取三十天前日期",
      "  let dateArr = [enddate];",
      "  for (let i = 1; i < 30; i++) {",
      "    var lw = new Date(myDate - 1000 * 60 * 60 * 24 * i); //最后一个数字30可改，30天的意思",
      "    var lastY = lw.getFullYear();",
      "    var lastM = lw.getMonth() + 1;",
      "    var lastD = lw.getDate();",
      "    var startdate = lastY + '-' + (lastM < 10 ? '0' + lastM : lastM) + '-' + (lastD < 10 ? '0' + lastD : lastD);",
      "    dateArr.unshift(startdate);",
      "  }",
      "  return dateArr;",
      "};",
      "",
      "//多表单验证",
      "export const checkForm = (formName, self) => {",
      "  // console.log(formName)",
      "  return new Promise((resolve, reject) => {",
      "    self.$refs[formName].validate((valid) => {",
      "      if (valid) {",
      "        resolve();",
      "      } else {",
      "        reject();",
      "      }",
      "    });",
      "  });",
      "};",
      "",
      "/**",
      " * 表单验证方法的封装. 主要不必再写逻辑判断和统一失败提示语",
      " * @param {*} _this vue文件传递的this",
      " * @param {*} ref form的ref名字",
      " * @param {*} sucCb 验证成功的回调",
      " * @example",
      " * this.$pub.validateForm(this, ()=>{})",
      " * this.$pub.validateForm(this, ()=>{}, 'form2Ref')",
      " */",
      "export function validateForm(_this, sucCb, ref = 'formRef') {",
      "  _this.$refs[ref].validate((valid) => {",
      "    if (valid) {",
      "      sucCb();",
      "    } else {",
      "      return $toast('验证未通过', 'e');",
      "    }",
      "  });",
      "}",
      "",
      "/**",
      " * 返回一个promise的睡眠函数",
      " */",
      "export function sleep(time = 0) {",
      "  return new Promise((resolve) => setTimeout(resolve, time));",
      "}",
      ""
    ],
  },
  "$toast简写": {
    "prefix": "$toast简写",
    "scope": "javascript,typescript",
    "body": [
      "this.\\$pub.\\$toast(\"${1:测试}\");"
    ],
    "description": "this.$pub.$toast简写"
  },
  "mm-mixins-help": {
    "prefix": "mm-mixins-help简写",
    "scope": "",
    "body": [
      "this.${1|mBlurRequired,mChangeRequired,mBatchTitle,mDisabled,mValidForm,mNameLength,mValidateName,mValidateChinese,mValidateMobile,validateNumber,mClearValidate|}(${2})"
    ],
    "description": [
      "#1. pageMixin.js文件内容",
      "// 返回true，表示无权限；返回false，表示有权限",
      "mDisabled(sendStr, row = '') {",
      "  // 行内按钮权限和全局按钮权限对应字段。",
      "  const dict = {",
      "    CREATE: 'create',",
      "    UPDATE: 'edit',",
      "    DELETE: 'del',",
      "    CONFIG: 'config',",
      "  };",
      "  // 如果是走后台逻辑登录",
      "  try {",
      "    let nowPageMenuKey = '';",
      "    if (this.$route && this.$route.meta) {",
      "      nowPageMenuKey = this.$route.meta.menuKey;",
      "    }",
      "    // 如果当前路由没有menuKey, 那么按钮权限全部放开都可以点击",
      "    if (!nowPageMenuKey) {",
      "      return false;",
      "    }",
      "    const btnList = this.$route.meta.btnList || [];",
      "    // 如果当前路由有menuKey且本地缓存中有权限控制。 过滤出按钮的权限",
      "    let isDisabled = true;",
      "    let rowDisabled = false;",
      "    if (nowPageMenuKey) {",
      "      if (btnList.length > 0) {",
      "        btnList.forEach((val) => {",
      "          if (val.action_mode === sendStr || val.code === sendStr) {",
      "            isDisabled = false;",
      "          }",
      "        });",
      "      }",
      "    }",
      "    if (row && row.permissionTypes) {",
      "      let matchStr = dict[sendStr];",
      "      rowDisabled = !row.permissionTypes.includes(matchStr);",
      "    }",
      "    return isDisabled || rowDisabled;",
      "  } catch (error) {",
      "    // 如果有错误， 按钮都不可点击",
      "    console.error('pageMixin进入到catch错误', error);",
      "    return true;",
      "  }",
      "},",
      "/**",
      " * dom 加载完成，计算高度并发送给iframe接收",
      " * @param id",
      " */",
      "mPostMessageHeight(id) {",
      "  let newWindow = new Function('return window')();",
      "  if (newWindow.parent) {",
      "    let domH = document.querySelector(id).scrollHeight || 0; //获取自身高度",
      "    newWindow.parent.postMessage(domH, '*');",
      "  }",
      "},",
      "/**",
      " * 向iframe 发送 message",
      " * @param params",
      " */",
      "mPostMessage(params) {",
      "  let newWindow = new Function('return window')();",
      "  if (newWindow.parent) {",
      "    newWindow.parent.postMessage(params, '*');",
      "  }",
      "},",
      "/**",
      " * 设置iframe 高度",
      " * @param event",
      " */",
      "mSetIframeHeight(event) {",
      "  document.querySelector('#kdIframe').style.height = event.data + 'px';",
      "},",
      "// 如果本地路由没有存menuKey返回空， 否则返回当前menuKey",
      "mMenuKey() {",
      "  if (!this.$route.meta || !this.$route.meta.menuKey) {",
      "    return '';",
      "  }",
      "  return this.$route.meta.menuKey;",
      "},",
      "",
      "// 清空form表单的校验",
      "mClearValidate(formRef = 'formRef') {",
      "  if (this.$refs[formRef]) {",
      "    this.$nextTick(() => {",
      "      this.$refs[formRef].clearValidate();",
      "    });",
      "  }",
      "},",
      "// 根据传入的width, 返回处理后的width",
      "mHandleWidth() {",
      "  if (this.block) {",
      "    return { width: '100%' };",
      "  }",
      "  if (!this.width) {",
      "    return {};",
      "  }",
      "  if (typeof this.width === 'string' && (this.width.indexOf('px') !== -1 || this.width.indexOf('%') !== -1)) {",
      "    return { width: this.width };",
      "  }",
      "  return { width: this.width + 'px' };",
      "},",
      "/**",
      " * 用于不写computed属性来展示删除, 移动个数",
      " * @param {*} str 要展示的字符串",
      " * @param {*} arr 要显示的数组长度. 如果为空数组, 则",
      " * @example",
      " * 删除相关, 如果selectArr为[], 显示`删除`; 如果selectArr长度为3, 显示`删除(3)`",
      " * {{ mBatchTitle('删除', selectArr) }}",
      " * :referenceText=\"mBatchTitle('删除', selectArr)\"",
      " * {{mBatchTitle('删除', selectArr)}}",
      " */",
      "mBatchTitle(str, arr = []) {",
      "  if (Array.isArray(arr) && arr.length > 0) {",
      "    return `${str}(${arr.length})`;",
      "  }",
      "  return str;",
      "},",
      "/**",
      " *",
      " * @param {*} str 要显示的最基础文本",
      " * @param {*} fileName 当前文件的文件名",
      " * @param {*} type 当为true或者'add'的时候为新增, 为edit或false的时候是编辑, 否则为基础文本",
      " * @param {*} otherParams 待开发",
      " * @example",
      " *  :title=\"mSetTitle('项目', 'project')\" => 项目(project)",
      " *  :title=\"mSetTitle('项目', 'project', type)\" => 新增项目(project)",
      " *  :title=\"mSetTitle('项目', 'project', type==='add')\" => 新增项目(project)",
      " */",
      "mSetTitle(str, fileName, type = '', otherParams = {}) {",
      "  let devFile = '';",
      "  if (process.env.NODE_ENV === 'development' && fileName) {",
      "    devFile = `(${fileName})`;",
      "  }",
      "  if (type === 'add' || type === true) {",
      "    return `新建${str}${devFile}`;",
      "  } else if (type === 'edit' || type === false) {",
      "    return `编辑${str}${devFile}`;",
      "  }",
      "  return `${str}${devFile}`;",
      "},",
      "",
      "/**",
      " * 验证表单是否可以提交",
      " * this.mValidForm()",
      " * this.mValidForm(\"formRef\", {errorText: \"不允许提交\"})",
      " */",
      "mValidForm(formName = 'formRef', { errorText = '验证未通过' } = {}) {",
      "  return new Promise((resolve, reject) => {",
      "    this.$refs[formName].validate((valid) => {",
      "      if (valid) {",
      "        resolve();",
      "      } else {",
      "        this.$pub.$toast(errorText, 'e');",
      "        reject();",
      "      }",
      "    });",
      "  });",
      "},",
      "",
      "// 建议下拉框和输入框的校验, 全改为mRequired。 mBlurRequired和mChangeRequired废弃",
      "mBlurRequired(str = '请输入') {",
      "  return { required: true, message: str, trigger: ['blur', 'change'] };",
      "},",
      "mChangeRequired(str = '请选择') {",
      "  return { required: true, message: str, trigger: 'change' };",
      "},",
      "mNameLength(str = '长度最大为64个字符') {",
      "  return { min: 1, max: 64, message: str, trigger: ['blur', 'change'] };",
      "},",
      "// 通用",
      "// 校验英文",
      "// 请输入支持英文、下划线、数字,且不能以下划线开头和结尾",
      "mValidateName(errorInfo = '由英文、数字、下划线组成，且不能以下划线开头结尾') {",
      "  const validator = (rule, value, callback) => {",
      "    // /^[0-9a-zA-Z_\\-\\.\\u4e00-\\u9fa5]{1,}$/",
      "    // eslint-disable-next-line",
      "            // let validFlag = /^[0-9a-zA-Z_\\-]{1,}$/.test(value);",
      "    let validFlag = /^(?!_)(?!.*?_$)[a-zA-Z0-9_]+$/.test(value);",
      "    if (!validFlag) {",
      "      callback(new Error(errorInfo));",
      "    } else {",
      "      callback();",
      "    }",
      "  };",
      "  return { validator, trigger: ['blur', 'change'] };",
      "},",
      "",
      "#2. validate.js文件内容",
      "// 中文",
      "// 请输入支持中文、英文、数字,且不能以下划线开头和结尾",
      "mValidateChinese(errorInfo = '由中文、英文、数字、下划线组成，且不能以下划线开头结尾') {",
      "  const validator = (rule, value, callback) => {",
      "    if (!value) {",
      "      callback();",
      "    } else {",
      "      // eslint-disable-next-line",
      "                // let reg = /[`~!@#$%^&*()+=<>?:\"{}|,\\/;'\\\\[\\]·！￥……（）——《》？：“”【】、；‘，。、\\s]/g",
      "      let reg = /^(?!_)(?!.*?_$)[a-zA-Z0-9_\\u4e00-\\u9fa5]+$/;",
      "      let validFlag = reg.test(value);",
      "      if (!validFlag) {",
      "        callback(new Error(errorInfo));",
      "      } else {",
      "        callback();",
      "      }",
      "    }",
      "  };",
      "  return { validator, trigger: ['blur', 'change'] };",
      "},",
      "// 校验IP",
      "mValidateIP(errorInfo) {",
      "  return (rule, value, callback) => {",
      "    let validFlag =",
      "      /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/.test(",
      "        value",
      "      );",
      "    if (!validFlag) {",
      "      callback(new Error(errorInfo));",
      "    } else {",
      "      callback();",
      "    }",
      "  };",
      "},",
      "// 校验host",
      "mValidateHost(errorInfo) {",
      "  return (rule, value, callback) => {",
      "    let validFlag = /^[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\\.?$/.test(value);",
      "    if (!validFlag) {",
      "      callback(new Error(errorInfo));",
      "    } else {",
      "      callback();",
      "    }",
      "  };",
      "},",
      "// 校验mobile",
      "mValidateMobile(errorInfo) {",
      "  return (rule, value, callback) => {",
      "    if (!value) {",
      "      callback();",
      "    } else {",
      "      // let validFlag = /^[1][0-9]{10}$/.test(value);",
      "      let validFlag = new RegExp('^[1][0-9]{10}$').test(value);",
      "      if (!validFlag) {",
      "        callback(new Error(errorInfo));",
      "      } else {",
      "        callback();",
      "      }",
      "    }",
      "  };",
      "},",
      "",
      "// 验证电子邮箱格式",
      "mValidateEmail(errorInfo) {",
      "  return (rule, value, callback) => {",
      "    if (!value) {",
      "      callback();",
      "    } else {",
      "      // let validFlag = /^[1][0-9]{10}$/.test(value);",
      "      let validFlag =",
      "        /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/.test(",
      "          value",
      "        );",
      "      if (!validFlag) {",
      "        callback(new Error(errorInfo));",
      "      } else {",
      "        callback();",
      "      }",
      "    }",
      "  };",
      "},",
      "/**",
      " * 仅支持数字",
      " */",
      "validateNumber(errorInfo = '请输入正整数') {",
      "  const validator = (rule, value, callback) => {",
      "    // /^[0-9a-zA-Z_\\-\\.\\u4e00-\\u9fa5]{1,}$/",
      "    // eslint-disable-next-line",
      "            // let validFlag = /^[0-9a-zA-Z_\\-]{1,}$/.test(value);",
      "    // 如果值为空的话不做校验",
      "    if (!value) {",
      "      callback();",
      "    } else {",
      "      let validFlag = /^[0-9]+$/.test(value);",
      "      if (!validFlag) {",
      "        callback(new Error(errorInfo));",
      "      } else {",
      "        callback();",
      "      }",
      "    }",
      "  };",
      "  return { validator, trigger: ['blur', 'change'] };",
      "},",
      ""
    ],
  },
  "tt简写": {
    "prefix": "tt提示简写",
    "scope": "javascript,typescript",
    "body": [
      "this.\\$pub.\\$toast(\"$1\");$0"
    ],
    "description": "this.$pub.$toast()的简写"
  },
  "tg简写": {
    "prefix": "tg获取缓存简写",
    "scope": "javascript,typescript",
    "body": [
      "this.\\$pub.\\$getStorage(\"${0:$CLIPBOARD}\");"
    ],
    "description": "this.$pub.$getStorage()的简写"
  },
  "ts简写": {
    "prefix": "ts设置缓存简写",
    "scope": "javascript,typescript",
    "body": [
      "this.\\$pub.\\$setStorage(\"${1:$CLIPBOARD}\", $0);"
    ],
    "description": "this.$pub.$getStorage()的简写"
  },
  "td简写": {
    "prefix": "td克隆简写",
    "scope": "javascript,typescript",
    "body": [
      "this.\\$pub.deepClone(${0:$CLIPBOARD});"
    ],
    "description": "this.$pub.deepClone()的简写"
  },
  "tu": {
    "prefix": "tu",
    "scope": "javascript,typescript",
    "body": [
      "this.$$pub.uuid('$1'$2)$0"
    ],
    "description": "this.$pub.uuid()的简写"
  },
  "http": {
    "prefix": "h",
    "scope": "javascript,typescript",
    "body": [
      "\\$http($1$0).then(res => {",
      "\tconsole.log(`%c res` + '',",
      "\"background-image:color:transparent;color:blue;font-size:2em\");",
      "\tconsole.log(res);",
      "});"
    ],
    "description": "this的简写"
  },
  "ww": {
    "prefix": "ww",
    "scope": "javascript,typescript",
    "body": [
      "watch: {",
      "  ${1:${CLIPBOARD}}(val) {",
      "    this.$2 = val;",
      "  },",
      "},"
    ],
    "description": "ww"
  },
  "f": {
    "prefix": "f-method下方法简写",
    "scope": "javascript, typescript",
    "body": [
      "${1:${CLIPBOARD}}() {",
      "\t$0",
      "},"
    ],
    "description": "method下的方法简写"
  },
  "dd": {
    "prefix": "dd简写",
    "scope": "javascript, typescript",
    "body": [
      "this.${1:${CLIPBOARD}}"
    ],
    "description": [
      ""
    ],
  },
  "df": {
    "prefix": "df简写",
    "scope": "javascript, typescript",
    "body": [
      "this.${1:${CLIPBOARD}}()"
    ],
    "description": [
      ""
    ],
  },
  "cmp": {
    "prefix": "cmp",
    "scope": "javascript,typescript",
    "body": [
      "components: {",
      "\t$0",
      "},"
    ],
    "description": "简写components"
  },
  "ef": {
    "prefix": "ef",
    "scope": "javascript,typescript",
    "body": [
      "export function $1($2) {",
      "\t$0",
      "}"
    ],
    "description": "export导出函数"
  },
  "cp": {
    "prefix": "cp",
    "scope": "scss,css,less",
    "body": [
      "cursor: pointer;"
    ],
    "description": "cursor: pointer"
  },
  "kkk": {
    "prefix": "kkk",
    "scope": "",
    "body": [
      "${RANDOM/[0-9]{4}//}",
      "${RANDOM_HEX}",
      "${UUID}"
    ],
    "description": "测试"
  },
  "next简写": {
    "prefix": "next简写",
    "scope": "javascript,typescript,vue",
    "body": [
      "this.\\$nextTick(() => {",
      "\t$0",
      "});"
    ],
    "description": "$nexttick"
  },
  "b": {
    "prefix": "el-button简写",
    "scope": "vue-html, html",
    "body": [
      "<el-button type=\"primary\" @click=\"${1:t${RANDOM/[0-9]{4}//}}\">${0:测试${RANDOM/[0-9]{4}//}}</el-button>"
    ],
    "description": [
      "#1. 加icon",
      "<el-button",
      "  type=\"primary\"",
      "  icon=\"el-icon-plus\"",
      "  class=\"ml\"",
      "  @click=\"addUser\"",
      ">",
      "  添加用户",
      "</el-button>",
      "#2. border为虚线的button",
      "<el-button style=\"border: 1px dashed var(--blue)\" class=\"w-100% h-32\">",
      "  <span class=\"cl-blue\"> 新建 </span>",
      "</el-button>"
    ]
  },
  "el-radio": {
    "prefix": "el-radio简写",
    "scope": "vue-html, html",
    "body": [
      "<el-radio v-model=\"radio\" label=\"1\">选项1</el-radio>",
      "<el-radio v-model=\"radio\" label=\"2\">选项2</el-radio>",
      "",
    ],
    "description": [
      "<el-radio v-model=\"radio\" label=\"1\">选项1</el-radio>",
      "<el-radio v-model=\"radio\" label=\"2\">选项2</el-radio>",
      "",
      "<el-radio-group v-model=\"radio\">",
      "  <el-radio :label=\"1\">选项1</el-radio>",
      "  <el-radio :label=\"2\">选项2</el-radio>",
      "</el-radio-group>",
      "<el-radio-group v-model=\"radio\" :disabled=\"radioDisabled\">",
      "  <el-radio v-for=\"(v, i) in radioOptions\" :key=\"i\" :label=\"v.value\">",
      "    {{ v.label }}",
      "  </el-radio>",
      "</el-radio-group>",
    ],
  },
  "el-checkbox": {
    "prefix": "el-checkbox简写",
    "scope": "vue-html, html",
    "body": [
      "<el-checkbox-group v-model=\"checkedCities\" @change=\"checkboxChange\">",
      "  <el-checkbox",
      "    v-for=\"(item, index) in options\"",
      "    :key=\"index\"",
      "    :label=\"item.value\"",
      "    >{{ item.label }}",
      "</el-checkbox>",
      "</el-checkbox-group>"
    ],
    "description": [
      "#1. 基本用法",
      "1. 最基本用法",
      "<el-checkbox v-model=\"checked\">备选项</el-checkbox>",
      "2. 多选框组   ",
      "<el-checkbox-group v-model=\"checkedCities\" @change=\"checkboxChange\">",
      "  <el-checkbox",
      "    v-for=\"(item, index) in options\"",
      "    :key=\"index\"",
      "    :label=\"item.value\"",
      "    >{{ item.label }}</el-checkbox",
      "  >",
      "</el-checkbox-group>",
      "",
      "#2. 常用属性",
      " checked	当前是否勾选	boolean	—	false",
      " indeterminate	设置 indeterminate 状态，只负责样式控制	boolean	—	false",
      " ",
      "#3. 方法",
      "change	当绑定值变化时触发的事件	更新后的值"
    ],
  },
  "el-descriptions": {
    "prefix": "el-descriptions简写",
    "scope": "vue-html, html",
    "body": [
      "<el-descriptions>",
      "  <el-descriptions-item label=\"${1:左侧}\">${2:右侧}</el-descriptions-item>",
      "</el-descriptions>"
    ],
    "description": [
      "#1. 用法      ",
      "<el-descriptions>",
      "  <el-descriptions-item label=\"左侧\">",
      "      右侧",
      "  </el-descriptions-item>",
      "</el-descriptions>",
      "#2. 属性",
      "参数	说明	类型	可选值	默认值",
      "column	一行 Descriptions Item 的数量	number	—	3",
      "colon	是否显示冒号	boolean	—	true",
    ],
  },
  "kd-job-tree": {
    "prefix": "kd-job-tree简写",
    "scope": "vue-html, html",
    "body": [
      "    <kd-job-tree",
      "      ref=\"jobTreeRef\"",
      "      :default-props=\"defaultProps\"",
      "      :tree-props=\"{ children: 'children', label: 'name' }\"",
      "      :data=\"treeData\"",
      "      @nodeHandler=\"nodeHandler\"",
      "    >",
      "      <template #data=\"{ data, node }\">",
      "        <span class=\"fs-12\">{{ data.name }}</span>",
      "      </template>",
      "    </kd-job-tree>"
    ],
    "description": [
      "      treeData: [",
      "        {",
      "          id: \"1551899237577396292\",",
      "          parentId: null,",
      "          name: \"DD\",",
      "          path: \"/DD\",",
      "          children: [",
      "            {",
      "              id: \"1555115624034734129\",",
      "              parentId: \"1551899237577396292\",",
      "              name: \"dd2\",",
      "              path: \"/DD/dd2\",",
      "              children: [",
      "                {",
      "                  id: \"1555115691147792393\",",
      "                  parentId: \"1555115624034734129\",",
      "                  name: \"dd3\",",
      "                  path: \"/DD/dd2/dd3\",",
      "                },",
      "              ],",
      "            },",
      "          ],",
      "        },",
      "        {",
      "          id: \"1551899237572\",",
      "          parentId: null,",
      "          name: \"dd\",",
      "          path: \"/dd\",",
      "          children: [",
      "            {",
      "              id: \"155189927572\",",
      "              parentId: null,",
      "              name: \"aa\",",
      "              path: \"/aa\",",
      "            },",
      "          ],",
      "        },",
      "      ],",
      "      ",
      "      defaultProps: {",
      "        title: \"资源管理\",",
      "        btns: [",
      "          {",
      "            content: \"编辑\",",
      "            handler: this.editTree,",
      "          },",
      "          {",
      "            content: \"删除\",",
      "            confirm: this.deleteTree,",
      "            confirmInfo: \"确认删除本条数据吗？\",",
      "          },",
      "        ],",
      "      },"
    ],
  },
  "kd-icon": {
    "prefix": "kd-icon简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-icon name=\"${1:kd-icon-error-circle-filled}\" size=\"18\" default-color=\"var(--blue)\"></kd-icon>$0"
    ],
    "description": [
      "#1. 用法",
      "1. content使用插槽",
      "<kd-tooltip>",
      "  <template slot=\"content\">",
      "    <div>content用插槽</div>",
      "  </template>",
      "  <kd-icon name=\"kd-icon-error-circle-filled\" size=\"18\" default-color=\"var(--blue)\"></kd-icon>",
      "</kd-tooltip>",
      "#2. 属性",
      "kd-icon在图标标签的外部增加了div和el-tooltip组件，提供了更多的可利用功能。",
      "属性配置如下：",
      "- name：string,完整的图标类名：项目公共图标 kd-icon-xxx，el图标 el-icon-xxx，项目本地图标 icon-xxx（组件自动补全为\"iconfot icon-xxx\"）；在下方图标列表中点击即可复制类名。",
      "- tooltip：string，默认值''；tooltip要显示的内容，默认为空时不显示",
      "- names：数组，格式{name:'',key:'',tooltip: ''}； 当一个位置需要动态切换图标时，可使用该属性，name的优先级高于names。",
      "---- item.name：同name属性用法",
      "---- item.tooltip：图标对应的tooltip，如果未设置，会使用组件的tooltip属性值",
      "---- item.key：用来区分图标对应的操作，以参数形式返回给click事件",
      "- size：string | number，默认值16；指定图标大小，同font-size属性作用；同时还会作用于图标容器，影响占位大小",
      "- pointer：boolean，默认值false；是否为pointer样式",
      "- tooltip-attrs：object，默认值{ effect: 'dark', placement: 'top', 'open-delay': 200}；作用在el-tooltip上的属性，",
      "- default-color：string，默认值'inherit'；颜色",
      "- hover-color：string，默认值''；hover时颜色",
      "- is-place：boolean，默认值false；是否占位，当没有name或names值时，是否占位，就是图标不显示但空间仍被占居",
      "- wrap-style：object，用于自定义kd-icon容器的样式",
      "- wrap-class：string，自定义kd-icon容器的类名",
      "- mt/mr/mb/ml：string，默认值0；不带px单位的边距值，分别控制图标各个方向的外边距",
      "- custom-next：boolean，默认值false；是否自定义next事件，如果为true，则必须外部调用next()方法才会切换图标",
      "",
      "事件：",
      "- click：图标点击回调，如果有key，则返回key；如果有多个图标，默认情况下自动切换到下一个图标",
      "",
      "方法：",
      "- next：当组件进行手动多值切换（custom-next=true）时，通过ref调用next()方法，它接收三种类型参数：",
      "---- undefined：默认，不传参数，切换到下一个图标",
      "---- 数字类型：指定图标索引，如果超限，则切换到下一个图标",
      "---- 字符串类型：指定图标key，如果不存在，则切换到下一个图标"
    ]
  },
  "vueT": {
    "prefix": "vueT简写",
    "body": [
      "<template>",
      "  <div>",
      "    <el-button type=\"primary\" @click=\"t1\">测试1</el-button>",
      "    <el-button type=\"info\" @click=\"t2\">测试2</el-button>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"Test1\",",
      "  components: {},",
      "  props: {},",
      "  data() {",
      "    return {",
      "      num: 123,",
      "      isShow: false,",
      "      str: \"hello world\",",
      "      arr: [11, 22, 33],",
      "      obj: {",
      "        name: \"andy\",",
      "        age: 18,",
      "        objArr: [{ chName: \"凌云\", height: 188 }]",
      "      },",
      "      date: new Date()",
      "    };",
      "  },",
      "  computed: {},",
      "  watch: {},",
      "  created() {",
      "    this.t1();",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    t1() {",
      "      console.log(\"t1\");",
      "    },",
      "    t2() {",
      "      console.log(\"t2\");",
      "    }",
      "  }",
      "};",
      "</script>",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": "测试模板"
  },
  "kd-input": {
    "prefix": "kd-input简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-input v-model=\"$1\" />$0"
    ],
    "description": [
      "#1. 用法",
      "<kd-input v-model=\"iptValue\" />",
      "<kd-input v-model=\"iptValue\" type=\"password\" title=\"密码框\" class=\"mlr\" />",
      "<kd-input v-model=\"iptValue\" type=\"textarea\" />",
      "<kd-input v-model=\"iptValue\" type=\"textarea\" disabled placeholder=\"请输入问题\" />",
      "#2. 属性:",
      "type: password, textarea",
      "width: 宽度, 支持全部宽度",
      "block: 宽度100%",
      "maxlength: 原生属性，最大输入长度",
      "#3. 源码",
      "<template>",
      "  <el-input",
      "    v-bind=\"$attrs\"",
      "    v-model=\"iptValue\"",
      "    :placeholder=\"handlePlaceholder()\"",
      "    class=\"kd-ipt\"",
      "    :clearable=\"$attrs.clearable !== false\"",
      "    :class=\"{ 'kd-textarea': $attrs.type === 'textarea' }\"",
      "    :style=\"{ ...mHandleWidth() }\"",
      "    :maxlength=\"handleMaxLength\"",
      "    :show-word-limit=\"handleShowWordLimit()\"",
      "    :resize=\"$attrs.type === 'textarea' ? 'none' : ''\"",
      "    v-on=\"$listeners\"",
      "    @focus=\"focusHandler($event)\"",
      "    @keyup.delete.native=\"keyUpDeleteHandler()\"",
      "  >",
      "    <div v-if=\"$attrs.title\" slot=\"prepend\">",
      "      {{ $attrs.title }}",
      "    </div>",
      "  </el-input>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'KdInput',",
      "  props: {",
      "    value: {",
      "      type: [String, Number],",
      "      default: '',",
      "    },",
      "    width: {",
      "      type: [String, Number],",
      "      default: '',",
      "    },",
      "    showWordLimit: {",
      "      type: [Boolean, String],",
      "      default: '',",
      "    },",
      "    block: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "  },",
      "  computed: {",
      "    // 主要是为了处理， 如果type是password的情况, 值的修改",
      "    iptValue: {",
      "      set(v) {",
      "        this.$emit('input', v);",
      "      },",
      "      get() {",
      "        return this.value;",
      "      },",
      "    },",
      "    // 如果是textarea。 默认文本长度为200",
      "    handleMaxLength() {",
      "      if (this.$attrs.type === 'textarea') {",
      "        return this.$attrs.maxlength || 200;",
      "      } else {",
      "        return this.$attrs.maxlength || '';",
      "      }",
      "    },",
      "  },",
      "  created() {},",
      "  methods: {",
      "    handlePlaceholder() {",
      "      const { $attrs } = this;",
      "      let res = $attrs.disabled ? '' : $attrs.placeholder || '请输入';",
      "      return res;",
      "    },",
      "    // 如果是密码输入框, 删除直接清空所有文本",
      "    keyUpDeleteHandler() {",
      "      if (this.$attrs.type === 'password') {",
      "        this.iptValue = '';",
      "      }",
      "    },",
      "    // 是否显示showWordLimit属性",
      "    handleShowWordLimit() {",
      "      if (typeof this.showWordLimit === 'boolean') {",
      "        return this.showWordLimit;",
      "      }",
      "      if (this.$attrs.type === 'textarea') {",
      "        return true;",
      "      }",
      "      return false;",
      "    },",
      "    // 如果是密码输入框, focus直接选中文本",
      "    focusHandler(evt) {",
      "      if (this.$attrs.type === 'password') {",
      "        evt.currentTarget.select();",
      "      }",
      "    },",
      "  },",
      "};",
      "</script>",
      ""
    ],
  },
  "kd-step": {
    "prefix": "kd-step简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-step :active=\"2\" :steps='[{ name: \"基础配置\" },{ name: \"资源配置\" },{ name: \"配置确认\" }]'></kd-step>"
    ],
    "description": [
      "#1. 用法",
      "<kd-step :active=\"3\" :steps='[{ name: \"基础配置\" },{ name: \"资源配置\" },{ name: \"配置确认\" }]'></kd-step>",
      "",
      "#2. 属性",
      "属性 | 说明 | 类型 | 默认值",
      "--- | :---| :---| :---",
      "active |  当前被选中的step | Number | 1",
      "steps | Array<name> [{name: \"step1\"},{name: \"step2\"}]| Array | [{ name: \"同步配置\" },{ name: \"读取配置\" }, { name: \"任务设置\" }]",
      "``` ",
      "#3. 源码",
      "<!--",
      "  * @description: step,根据屏幕宽度和step的数量自适应。",
      "  * @author: huruirui@keendata.com",
      "  !-->",
      " <template>",
      "   <div class=\"task-step\">",
      "     <ul ref=\"taskStep\" class=\"step-container\">",
      "       <li",
      "         v-for=\"(item, index) in steps\"",
      "         :key=\"index\"",
      "         :class=\"{ finished: index + 1 < active, active: index + 1 === active }\"",
      "       >",
      "         <span class=\"li-span\">",
      "           <i :class=\"{ 'el-icon-circle-check': index + 1 < active }\">",
      "             {{ index + 1 }}",
      "           </i>",
      "           <span>{{ item.name }}</span>",
      "         </span>",
      "         <em :style=\"{ width: stepWidth + 'px' }\"></em>",
      "       </li>",
      "     </ul>",
      "   </div>",
      " </template>",
      " <script>",
      " // import { debounce } from \"@/share/utils/gFunc\";",
      " export default {",
      "   name: 'KdStep',",
      "   props: {",
      "     steps: {",
      "       type: Array,",
      "       require: true,",
      "       default() {",
      "         return [{ name: '同步配置' }, { name: '读取配置' }, { name: '任务设置' }];",
      "       },",
      "     },",
      "     active: {",
      "       type: Number,",
      "       default: 1,",
      "     },",
      "   },",
      "   data() {",
      "     return {",
      "       stepWidth: 100,",
      "     };",
      "   },",
      "   watch: {",
      "     steps() {",
      "       this.$nextTick(() => {",
      "         this.computedStepWidth();",
      "       });",
      "     },",
      "   },",
      "   mounted() {",
      "     let _this = this;",
      "     this.computedStepWidth();",
      "     window.addEventListener('resize', _this.computedStepWidth, true);",
      "   },",
      "   destroyed() {",
      "     window.removeEventListener('resize', this.computedStepWidth, true);",
      "   },",
      "   methods: {",
      "     computedStepWidth() {",
      "       let containerWidth = this.$refs.taskStep && this.$refs.taskStep.clientWidth;",
      "       let domLi = document.getElementsByClassName('li-span');",
      "       let stepLength = this.steps.length;",
      "       let lineMargin = (stepLength - 1) * 32;",
      "       let textLength = 0;",
      "       for (let item of domLi) {",
      "         textLength += item.offsetWidth;",
      "       }",
      "       this.stepWidth = (containerWidth - (textLength + lineMargin)) / (stepLength - 1);",
      "     },",
      "   },",
      " };",
      " </script>"
    ],
  },
  "kd-affix": {
    "prefix": "kd-affix简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-affix>",
      "  <el-button type=\"info\" @click=\"cancel\">取消</el-button>",
      "  <el-button type=\"info\" @click=\"prev\">上一步</el-button>",
      "  <el-button type=\"primary\" @click=\"next\">下一步</el-button>",
      "</kd-affix>",
    ],
    "description": [
      "    ",
      "#1. 用法    ",
      "<kd-affix>",
      "  <el-button type=\"info\" @click=\"cancel\">取消</el-button>",
      "  <el-button type=\"info\" @click=\"prev\">上一步</el-button>",
      "  <el-button type=\"primary\" @click=\"next\">下一步</el-button>",
      "</kd-affix>",
      "#2. 属性",
      "组件接收参数",
      "参数	说明	类型	默认值",
      "offset-bottom	距离底部窗口的值,不配置默认是offset-bottom：0	string	无",
      "offsetTop	距离顶部窗口的值	String	无",
      "#3. 源码",
      "<template>",
      "  <div class=\"kj-affix-footer\" v-bind=\"$attrs\" :style=\"boxStyle\">",
      "    <slot></slot>",
      "  </div>",
      "</template>",
      "<script>",
      "export default {",
      "  name: 'KdAffix',",
      "  props: {",
      "    offsetTop: {",
      "      type: [String, Number, undefined],",
      "    },",
      "    offsetBottom: {",
      "      type: [String, Number],",
      "      default: 0,",
      "    },",
      "  },",
      "  computed: {",
      "    boxStyle() {",
      "      // console.log(typeof this.offsetTop, 1222);",
      "      if (typeof this.offsetTop === 'string' || typeof this.offsetTop === 'number') {",
      "        return {",
      "          top: this.offsetTop,",
      "        };",
      "      } else {",
      "        return {",
      "          bottom: this.offsetBottom,",
      "        };",
      "      }",
      "    },",
      "  },",
      "};",
      "</script>"
    ],
  },
  "snippet": {
    "prefix": "snippet简写",
    "scope": "",
    "body": [
      "\"$1\": {",
      "  \"prefix\": \"$1简写\",",
      "  \"scope\": \"vue-html, html\",",
      "  \"body\": [",
      "    \"\"",
      "  ],",
      "  \"description\": [",
      "    \"\"",
      "  ],",
      "},"
    ],
    "description": [
      ""
    ],
  },
  "kd-lide-panel简写": {
    "prefix": "kd-lide-panel简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-slide-panel style=\"height: calc(100vh - 50px); border: 1px solid var(--gray)\">",
      "  <template #left>",
      "    <div>左侧容器</div>",
      "  </template>",
      "  <template #right>",
      "    <div>右侧容器</div>",
      "  </template>",
      "</kd-slide-panel>"
    ],
    "description": [
      "#1. 使用方法",
      "<kd-slide-panel style=\"height: calc(100vh - 50px); border: 1px solid var(--gray)\">",
      "  <template #left>",
      "    <div>左侧容器</div>",
      "  </template>",
      "  <template #right>",
      "    <div>右侧容器</div>",
      "  </template>",
      "</kd-slide-panel>",
      "#2. 属性",
      "#### 全局属性",
      "| 选项            | 类型     | 默认值 | 说明                 |",
      "|---------------|--------|-----|--------------------|",
      "| minWidth | number/string  | 190  | 左侧的最小宽度                |",
      "| maxWidth      | number/string | 450 | 左侧的最大宽度      |",
      "| leftWidth  | number/string | 222   | 左侧的默认宽度             |",
      "",
      "#### Slots",
      "| 选项             | 说明                 |",
      "|-----------------|--------------------|",
      "| left | 左侧内容插槽 |",
      "| right | 右侧内容插槽 |",
      "#3. 源码",
      "<template>",
      "  <div class=\"kd-multipane\">",
      "    <multipane class=\"horizontal-panes\" layout=\"vertical\" @paneResizeStop=\"paneResizeStop\">",
      "      <div class=\"left_panel\" :style=\"{ minWidth: minWidth + 'px', width: lWidth + 'px', maxWidth: maxWidth + 'px' }\">",
      "        <slot name=\"left\"></slot>",
      "      </div>",
      "      <multipane-resizer class=\"resizer\"></multipane-resizer>",
      "      <div class=\"right_panel\" :style=\"{ flexGrow: 1 }\">",
      "        <slot name=\"right\"></slot>",
      "      </div>",
      "    </multipane>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { Multipane, MultipaneResizer } from 'vue-multipane';",
      "export default {",
      "  name: 'KdSlidePanel',",
      "  components: {",
      "    Multipane,",
      "    MultipaneResizer,",
      "  },",
      "  props: {",
      "    leftWidth: {",
      "      type: Number,",
      "      default: 222,",
      "    },",
      "    minWidth: {",
      "      type: Number,",
      "      default: 190,",
      "    },",
      "    maxWidth: {",
      "      type: Number,",
      "      default: 450,",
      "    },",
      "  },",
      "  data() {",
      "    return {",
      "      lWidth: this.leftWidth,",
      "    };",
      "  },",
      "  created() {",
      "    window.onresize = () => {",
      "      //当触发window.onresize方法时调用子组件的方法重置代码结构区域大小",
      "      // this.$refs.jobEditorDom && this.$refs.jobEditorDom.resizeCode();",
      "      // this.bus.$emit('layoutEditor', true, window.innerWidth - this.lWidth - 67);",
      "      // this.bus.$emit('resizeDiffEditor', true, window.innerWidth);",
      "    };",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    /**",
      "     * When user release the resize handle to stop resizing a pane",
      "     */",
      "    paneResizeStop(pane, container, size) {",
      "      console.log('pane, container, size', pane, container, size);",
      "      this.lWidth = parseInt(size);",
      "      this.$emit('resizeStop', this.lWidth);",
      "    },",
      "  },",
      "};",
      "</script>",
      "<style lang=\"scss\" src=\"./index.scss\"></style>",
      ""
    ],
  },
  "gStyle-help": {
    "prefix": "gStyle-help源码",
    "scope": "",
    "body": [
      "<kd-input v-model=\"$0\" />"
    ],
    "description": [
      ":root {",
      "  --blue: #365edf;",
      "  --blue2: #f5f7fd;",
      "  --85: rgba(39, 48, 75, 0.85);",
      "  --65: rgba(39, 48, 75, 0.65);",
      "  --45: rgba(39, 48, 75, 0.45);",
      "  --black: #000;",
      "  --white: #ffffff;",
      "  --red: #e94c35;",
      "  --red2: #fdecea;",
      "  --yellow: #ffb51f;",
      "  --yellow2: #fff7e8;",
      "  --green: #30bd82;",
      "  --green2: #eaf8f2;",
      "  --gray: #ebedf0;",
      "  --gray2: #f7f8fa;",
      "  --line: #EBEDF0;",
      "}",
      "@each $cl, $clVar in blue var(--blue), blue2 var(--blue2), 85 var(--85),",
      "  65 var(--65), 45 var(--45), black var(--black), white var(--white),",
      "  red var(--red), red2 var(--red2), yellow var(--yellow), yellow2 var(--yellow2),",
      "  green var(--green), green2 var(--green2), gray var(--gray), gray2 var(--gray2),",
      "  line var(--line)",
      "{",
      "  .cl-#{\"\" + $cl} {",
      "    color: $clVar;",
      "  }",
      "  .bg-#{\"\" +$cl} {",
      "    background: $clVar;",
      "  }",
      "}",
      "",
      "// 定义flex等分",
      "@for $num from 0 through 24 {",
      "  .flex-#{$num},",
      "  .f-#{$num} {",
      "    flex: $num;",
      "  }",
      "  .o-#{$num} {",
      "    opacity: $num * 0.1;",
      "  }",
      "  @each $short, $long in p padding, m margin, h height, lh line-height {",
      "    .#{$short}#{\"\" + $num} {",
      "      #{$long}: $num * 8px;",
      "    }",
      "    @if ($short == p or $short == m) {",
      "      .#{$short}t#{\"\" + $num} {",
      "        #{$long}-top: $num * 8px;",
      "      }",
      "      .#{$short}r#{\"\" + $num} {",
      "        #{$long}-right: $num * 8px;",
      "      }",
      "      .#{$short}b#{\"\" + $num} {",
      "        #{$long}-bottom: $num * 8px;",
      "      }",
      "      .#{$short}l#{\"\" + $num} {",
      "        #{$long}-left: $num * 8px;",
      "      }",
      "      .#{$short}lr#{\"\" + $num} {",
      "        #{$long}: 0 $num * 8px;",
      "      }",
      "      .#{$short}tb#{\"\" + $num} {",
      "        #{$long}: $num * 8px 0;",
      "      }",
      "      .#{$short}t {",
      "        #{$long}-top: 8px;",
      "      }",
      "      .#{$short}r {",
      "        #{$long}-right: 8px;",
      "      }",
      "      .#{$short}b {",
      "        #{$long}-bottom: 8px;",
      "      }",
      "      .#{$short}l {",
      "        #{$long}-left: 8px;",
      "      }",
      "      .#{$short}lr {",
      "        #{$long}: 0 8px;",
      "      }",
      "      .#{$short}tb {",
      "        #{$long}: 8px 0;",
      "      }",
      "    }",
      "  }",
      "}",
      ".p {",
      "  padding: 8px;",
      "}",
      ".m {",
      "  margin: 8px;",
      "}",
      "",
      ".f {",
      "  display: flex;",
      "  align-items: center;",
      "}",
      ".f-i {",
      "  display: inline-flex;",
      "  align-items: center;",
      "}",
      ".f-c {",
      "  flex-direction: column;",
      "}",
      ".f-wrap,",
      ".f-w {",
      "  flex-wrap: wrap;",
      "}",
      "",
      "@for $index from 0 through 100 {",
      "  .ft-#{$index}, .fs-#{$index} {",
      "    font-size: $index + px;",
      "  }",
      "",
      "  .w-#{$index} {",
      "    width: $index + px;",
      "  }",
      "  .h-#{$index} {",
      "    height: $index + px;",
      "  }",
      "  .h-#{$index}\\% {",
      "    height: $index * 1%;",
      "  }",
      "  .w-#{$index}\\% {",
      "    width: $index * 1%;",
      "  }",
      "  .m-h-#{$index}\\% {",
      "    min-height: $index * 1%;",
      "  }",
      "  .m-w-#{$index}\\% {",
      "    min-width: $index * 1%;",
      "  }",
      "  .br-#{$index}\\% {",
      "    border-radius: $index * 1%;",
      "  }",
      "  .l-h-#{$index}\\% {",
      "    line-height: $index * 1%;",
      "  }",
      "  .l-h-#{$index} {",
      "    line-height: $index + px;",
      "  }",
      "  .br-#{$index} {",
      "    border-radius: $index + px;",
      "  }",
      "  .m-h-#{$index} {",
      "    min-height: $index + px;",
      "  }",
      "  .m-w-#{$index} {",
      "    min-width: $index + px;",
      "  }",
      "",
      "  // 缩写版，结果如: m-l-30",
      "  // 定义外边距",
      "  .m-#{$index} {",
      "    margin: $index + px;",
      "  }",
      "  .m-l-#{$index} {",
      "    margin-left: $index + px;",
      "  }",
      "  .m-t-#{$index} {",
      "    margin-top: $index + px;",
      "  }",
      "  .m-r-#{$index} {",
      "    margin-right: $index + px;",
      "  }",
      "  .m-b-#{$index} {",
      "    margin-bottom: $index + px;",
      "  }",
      "  .m-lr-#{$index} {",
      "    margin: 0 $index + px;",
      "  }",
      "  .m-tb-#{$index} {",
      "    margin: $index + px 0;",
      "  }",
      "",
      "  // 定义内边距",
      "  .p-#{$index} {",
      "    padding: $index + px;",
      "  }",
      "  .p-l-#{$index} {",
      "    padding-left: $index + px;",
      "  }",
      "  .p-t-#{$index} {",
      "    padding-top: $index + px;",
      "  }",
      "  .p-r-#{$index} {",
      "    padding-right: $index + px;",
      "  }",
      "  .p-b-#{$index} {",
      "    padding-bottom: $index + px;",
      "  }",
      "  .p-lr-#{$index} {",
      "    padding: 0 $index + px;",
      "  }",
      "  .p-tb-#{$index} {",
      "    padding: $index + px 0;",
      "  }",
      "",
      "  // 定义border",
      "  .bd-#{$index} {",
      "    border: $index + px solid var(--line-color);",
      "  }",
      "  .bd-l-#{$index} {",
      "    border-left: $index + px solid var(--line-color);",
      "  }",
      "  .bd-t-#{$index} {",
      "    border-top: $index + px solid var(--line-color);",
      "  }",
      "  .bd-r-#{$index} {",
      "    border-right: $index + px solid var(--line-color);",
      "  }",
      "  .bd-b-#{$index} {",
      "    border-bottom: $index + px solid var(--line-color);",
      "  }",
      "",
      "  // 定义上下左右 l-2 => left: 2px; t-10 => top: 10px;",
      "",
      "  .t-#{$index} {",
      "    top: $index + px;",
      "  }",
      "  .r-#{$index} {",
      "    right: $index + px;",
      "  }",
      "  .b-#{$index} {",
      "    bottom: $index + px;",
      "  }",
      "  .l-#{$index} {",
      "    left: $index + px;",
      "  }",
      "  .t-#{$index}\\% {",
      "    top: $index * 1px;",
      "  }",
      "  .r-#{$index}\\% {",
      "    right: $index * 1px;",
      "  }",
      "  .b-#{$index}\\% {",
      "    bottom: $index * 1px;",
      "  }",
      "  .l-#{$index}\\% {",
      "    left: $index * 1px;",
      "  }",
      "  .z-#{$index} {",
      "    z-index: $index;",
      "  }",
      "}",
      "",
      "@for $index from 101 through 1000 {",
      "  @if $index % 2 == 0 or $index % 5 == 0 or $index == 1 {",
      "    .w-#{$index} {",
      "      width: $index + px;",
      "    }",
      "    .h-#{$index} {",
      "      height: $index + px;",
      "    }",
      "    .h-#{$index}\\% {",
      "      height: $index * 1%;",
      "    }",
      "    .w-#{$index}\\% {",
      "      width: $index * 1%;",
      "    }",
      "    .m-h-#{$index}\\% {",
      "      min-height: $index * 1%;",
      "    }",
      "    .m-w-#{$index}\\% {",
      "      min-width: $index * 1%;",
      "    }",
      "    .l-h-#{$index}\\% {",
      "      line-height: $index * 1%;",
      "    }",
      "    .l-h-#{$index} {",
      "      line-height: $index + px;",
      "    }",
      "    .m-h-#{$index} {",
      "      min-height: $index + px;",
      "    }",
      "    .m-w-#{$index} {",
      "      min-width: $index + px;",
      "    }",
      "",
      "    // 缩写版，结果如: m-l-30",
      "    // 定义外边距",
      "    .m-#{$index} {",
      "      margin: $index + px;",
      "    }",
      "    .m-l-#{$index} {",
      "      margin-left: $index + px;",
      "    }",
      "    .m-t-#{$index} {",
      "      margin-top: $index + px;",
      "    }",
      "    .m-r-#{$index} {",
      "      margin-right: $index + px;",
      "    }",
      "    .m-b-#{$index} {",
      "      margin-bottom: $index + px;",
      "    }",
      "    .m-lr-#{$index} {",
      "      margin: 0 $index + px;",
      "    }",
      "    .m-tb-#{$index} {",
      "      margin: $index + px 0;",
      "    }",
      "",
      "    // 定义内边距",
      "    .p-#{$index} {",
      "      padding: $index + px;",
      "    }",
      "    .p-l-#{$index} {",
      "      padding-left: $index + px;",
      "    }",
      "    .p-t-#{$index} {",
      "      padding-top: $index + px;",
      "    }",
      "    .p-r-#{$index} {",
      "      padding-right: $index + px;",
      "    }",
      "    .p-b-#{$index} {",
      "      padding-bottom: $index + px;",
      "    }",
      "    .p-lr-#{$index} {",
      "      padding: 0 $index + px;",
      "    }",
      "    .p-tb-#{$index} {",
      "      padding: $index + px 0;",
      "    }",
      "",
      "    // 定义上下左右 l-2 => left: 2px; t-10 => top: 10px;",
      "",
      "    .t-#{$index} {",
      "      top: $index + px;",
      "    }",
      "    .r-#{$index} {",
      "      right: $index + px;",
      "    }",
      "    .b-#{$index} {",
      "      bottom: $index + px;",
      "    }",
      "    .l-#{$index} {",
      "      left: $index + px;",
      "    }",
      "    .t-#{$index}\\% {",
      "      top: $index * 1px;",
      "    }",
      "    .r-#{$index}\\% {",
      "      right: $index * 1px;",
      "    }",
      "    .b-#{$index}\\% {",
      "      bottom: $index * 1px;",
      "    }",
      "    .l-#{$index}\\% {",
      "      left: $index * 1px;",
      "    }",
      "    .z-#{$index} {",
      "      z-index: $index;",
      "    }",
      "  }",
      "}",
      "",
      "@each $short, $long in ct center, bt space-between, ar space-around, fe flex-end",
      "{",
      "  .f-#{$short} {",
      "    display: flex;",
      "    align-items: center;",
      "    justify-content: $long;",
      "  }",
      "}",
      "// overflow相关  visible hidden scroll auto",
      "@each $short, $long in v visible, h hidden, s scroll, a auto {",
      "  .o-#{$short} {",
      "    overflow: $long;",
      "  }",
      "}",
      "// 垂直对齐相关 vertical-align",
      "@each $short, $long in t top, b bottom, m middle, bl baseline, sb sub, sp super",
      "{",
      "  .v#{$short} {",
      "    vertical-align: $long;",
      "  }",
      "}",
      "// display显示相关",
      "@each $short, $long in b block, i inline, ib inline-block, f flex, n none {",
      "  .d-#{$short} {",
      "    display: $long;",
      "  }",
      "}",
      "// position相关",
      "@each $short, $long in r relative, a absolute, f fixed, s static {",
      "  .po-#{$short} {",
      "    position: $long;",
      "  }",
      "}",
      "",
      "@each $bold in 100, 200, 300, 400, 500, 600, 700, 800, 900 {",
      "  .fw-#{$bold},",
      "  .bold-#{$bold} {",
      "    font-weight: $bold;",
      "  }",
      "}",
      "",
      ".bd {",
      "  border: 1px solid var(--line-color);",
      "}",
      "",
      ".bs {",
      "  box-sizing: border-box;",
      "}",
      ".fw,",
      ".bold {",
      "  font-weight: 900;",
      "}",
      "",
      ".h-block {",
      "  height: 100%;",
      "}",
      ".w-block {",
      "  width: 100%;",
      "}",
      ".animate {",
      "  transition: all 0.2s linear;",
      "}",
      "",
      ".tl {",
      "  text-align: left;",
      "}",
      ".tc {",
      "  text-align: center;",
      "}",
      ".tr {",
      "  text-align: right;",
      "}",
      ".sd {",
      "  box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);",
      "}",
      ".ma {",
      "  margin: 0 auto;",
      "}",
      "",
      ".link {",
      "  cursor: pointer;",
      "  color: var(--primary-color);",
      "}",
      ".cp {",
      "  cursor: pointer;",
      "}",
      ".ac {",
      "  color: var(--primary-color);",
      "}",
      "",
      "//文本超出换行或隐藏，最多5行",
      "@for $i from 1 through 5 {",
      "  .line-#{$i} {",
      "    @if $i == \"1\" {",
      "      overflow: hidden;",
      "      white-space: nowrap;",
      "      text-overflow: ellipsis;",
      "    } @else {",
      "      display: -webkit-box !important;",
      "      overflow: hidden;",
      "      text-overflow: ellipsis;",
      "      word-break: break-all;",
      "      -webkit-line-clamp: $i;",
      "      -webkit-box-orient: vertical !important;",
      "    }",
      "  }",
      "}",
      ""
    ],
  },
  "kd-drawer": {
    "scope": "vue-html, html",
    "prefix": "kd-drawer简写",
    "body": [
      "<kd-drawer",
      "  ref=\"drawerRef\"",
      "  title=\"${1:${TM_FILENAME_BASE}}\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "></kd-drawer>"
    ],
    "description": [
      "1. 使用方法",
      "",
      "## 1. 可以传递属性和方法的用法",
      "<kd-drawer",
      "  v-on=\"$listeners\"",
      "  v-bind=\"$attrs\"",
      "  ref=\"drawerRef\"",
      "  title=\"可以传递方法和属性的用法\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "></kd-drawer>",
      "## 2.详情",
      "<kd-drawer",
      "  ref=\"drawerRef\"",
      "  title=\"详情\"",
      "  :visible.sync=\"isShow\"",
      "  type=\"detail\"",
      "></kd-drawer>",
      "## 3.确认按钮加loading",
      "<kd-drawer",
      "  ref=\"drawerRef\"",
      "  title=\"按钮加loading\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "  :confirmAttrs=\"{",
      "    loading: isLoading",
      "  }\"",
      "></kd-drawer>",
      "## 4.一些常用属性",
      "<kd-drawer",
      "  ref=\"drawerRef\"",
      "  :size=\"640\"",
      "  title=\"t1\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "  :showCancel=\"false\"",
      "  confirmText=\"关闭\"",
      "  :showFooter=\"true\"",
      "  :showClose=\"false\"",
      ">",
      "  <template #title>",
      "    <div>我是自定义头部</div>",
      "  </template>",
      "  <template #footer>",
      "    <div>我是自定义尾部</div>",
      "  </template>",
      "</kd-drawer>",
      "",
      "2. 属性",
      "",
      "#### 全局属性",
      "|选项|类型|默认值|说明|",
      "|---|---|---|---|",
      "|title|String|\"\"|抽屉标题名称|",
      "|showConfirm|Boolean|true|是否显示提交按钮|",
      "|showCancel|Boolean|true|是否显示取消按钮|",
      "|confirmText|String|\"提交\"|提交按钮文本|",
      "|cancelText|String|\"取消\"|取消按钮文本|",
      "|showFooter|Boolean|true|是否显示底部按钮|",
      "|cancelThrottleNumber|Number|1000|取消按钮节流|",
      "|confirmThrottleNumber|Number|2000|提交按钮节流|",
      "|destroyOnClose|Boolean|true|关闭时是否销毁抽屉中的元素|",
      "|loading|Boolean|false|抽屉内容的loading|",
      "|wrapperClosable|Boolean|process.env.NODE_ENV === 'development'|点击遮罩层是否可以关闭 Drawer，开发模式为true|",
      "|size|String/Number|640|Drawer的宽度|",
      "|withHeader|Boolean|true|控制是否显示 header 栏, 默认为 true, 当此项为 false 时, title attribute 和 title slot 均不生效|",
      "|modal-append-to-body|Boolean|true|遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Drawer 的父元素上|",
      "|direction|Direction|rtl / ltr / ttb / btt|Drawer 打开的方向|",
      "|modal|Boolean|true|是否需要遮罩层|",
      "|before-close|function(done)，done 用于关闭 Drawer|-|关闭前的回调，会暂停 Drawer 的关闭|",
      "|show-close|Boolean|true|是否显示关闭按钮|",
      "|append-to-body|Boolean|true|Drawer 自身是否插入至 body 元素上。嵌套的 Drawer 必须指定该属性并赋值为 true|",
      "|close-on-press-escape|Boolean|true|是否可以通过按下 ESC 关闭 Drawer|",
      "|custom-class|String|-|Drawer 的自定义类名|",
      "",
      "### 事件",
      "|事件名称|说明|回调参数|",
      "|---|---|---|",
      "|cancel|抽屉取消按钮|-|",
      "|confirm|抽屉提交按钮|-|",
      "",
      "### slot",
      "|名称|说明|参数|",
      "|---|---|---|",
      "|title|自定义抽屉标题|-|",
      "|footer|自定义抽屉底部按钮|-|",
      "",
      "3. 源码",
      "",
      "<template>",
      "  <el-drawer",
      "    :wrapper-closable=\"wrapperClosable\"",
      "    :destroy-on-close=\"destroyOnClose !== false\"",
      "    :with-header=\"true\"",
      "    :size=\"$attrs.size || 640\"",
      "    v-bind=\"$attrs\"",
      "    v-on=\"$listeners\"",
      "  >",
      "    <template slot=\"title\">",
      "      <slot name=\"title\">",
      "        <div>{{ title }}</div>",
      "      </slot>",
      "    </template>",
      "",
      "    <div v-loading=\"loading\" class=\"drawer-main\">",
      "      <el-scrollbar class=\"drawer-scrollbar\">",
      "        <div class=\"content\">",
      "          <slot></slot>",
      "        </div>",
      "      </el-scrollbar>",
      "",
      "      <div v-if=\"showFooter\" class=\"kd-drawer-footer\">",
      "        <slot name=\"footer\">",
      "          <el-button",
      "            v-if=\"showConfirm\"",
      "            v-throttle=\"cancelThrottleNumber\"",
      "            :type=\"confirmAttrs.type || 'primary'\"",
      "            v-bind=\"confirmAttrs\"",
      "            class=\"mr\"",
      "            @click=\"confirm\"",
      "          >",
      "            {{ confirmText }}",
      "          </el-button>",
      "          <el-button",
      "            v-if=\"showCancel\"",
      "            v-throttle=\"confirmThrottleNumber\"",
      "            :type=\"cancelAttrs.type || 'info'\"",
      "            v-bind=\"cancelAttrs\"",
      "            @click=\"handleClose\"",
      "          >",
      "            {{ cancelText }}",
      "          </el-button>",
      "        </slot>",
      "      </div>",
      "    </div>",
      "  </el-drawer>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'KdDrawer',",
      "  props: {",
      "    title: {",
      "      type: String,",
      "      default: '',",
      "    },",
      "",
      "    confirmText: {",
      "      type: String,",
      "      default: '提交',",
      "    },",
      "    showFooter: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    showConfirm: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    showCancel: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    cancelText: {",
      "      type: String,",
      "      default: '取消',",
      "    },",
      "    loading: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "",
      "    wrapperClosable: {",
      "      type: Boolean,",
      "      default: process.env.NODE_ENV === 'development',",
      "    },",
      "    cancelThrottleNumber: {",
      "      type: Number,",
      "      default: 1000,",
      "    },",
      "    confirmThrottleNumber: {",
      "      type: Number,",
      "      default: 2000,",
      "    },",
      "    destroyOnClose: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    confirmAttrs: {",
      "      type: Object,",
      "      default: () => {",
      "        return {};",
      "      },",
      "    },",
      "    cancelAttrs: {",
      "      type: Object,",
      "      default: () => {",
      "        return {};",
      "      },",
      "    },",
      "  },",
      "  computed: {},",
      "  mounted() {},",
      "  methods: {",
      "    confirm() {",
      "      if (this.$listeners.confirm) {",
      "        this.$emit('confirm');",
      "      } else {",
      "        this.$emit('update:visible', false);",
      "      }",
      "    },",
      "    handleClose() {",
      "      if (this.$listeners.cancel) {",
      "        this.$emit('cancel');",
      "      } else {",
      "        this.$emit('update:visible', false);",
      "      }",
      "    },",
      "  },",
      "};",
      "</script>",
      "",
      ""
    ],
  },
  "kd-dialog": {
    "scope": "vue-html, html",
    "prefix": "kd-dialog简写",
    "body": [
      "<kd-dialog",
      "  ref=\"dialogRef\"",
      "  title=\"${1:${TM_FILENAME_BASE}}\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"dialogConfirm\"",
      "></kd-dialog>"
    ],
    "description": [
      "1. 使用方法",
      "",
      "## 1. 可以传递属性和方法的用法",
      "<kd-dialog",
      "  v-on=\"$listeners\"",
      "  v-bind=\"$attrs\"",
      "  width=\"200px\"",
      "  ref=\"drawerRef\"",
      "  title=\"可以传递方法和属性的用法\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "></kd-dialog>",
      "## 2.确认按钮加loading",
      "<kd-dialog",
      "  ref=\"drawerRef\"",
      "  title=\"按钮加loading\"",
      "  :visible.sync=\"isShow\"",
      "  @confirm=\"confirm\"",
      "  :confirmAttrs=\"{",
      "    loading: isLoading,",
      "  }\"",
      "  theme=\"simple\"",
      ">",
      "</kd-dialog>",
      "## 3.一些常用属性",
      "<kd-dialog",
      "  ref=\"drawerRef\"",
      "  width=\"200px\"",
      "  title=\"常用属性\"",
      "  :visible.sync=\"isShow\"",
      "  :closeOnClickModal=\"false\"",
      "  @confirm=\"confirm\"",
      "  confirmText=\"关闭\"",
      "  :showFooter=\"true\"",
      "  :showClose=\"false\"",
      "  theme=\"simple\"",
      "  :border=\"false\"",
      ">",
      " <template #title>",
      "   <div>自定义title</div>",
      " </template> ",
      " <template #footer>",
      "   <div>自定义footer</div>",
      " </template>",
      "</kd-dialog>",
      "",
      "2. 属性",
      "",
      "### 属性",
      "#### 全局属性",
      "|选项|类型|默认值|说明|",
      "|---|---|---|---|",
      "|title|String|\"\"|弹框标题名称|",
      "|theme|String|\"\"|弹框样式：norm norm16 simple|",
      "|confirmDisabled|Boolean|false|确认按钮是否禁止点击|",
      "|cancelDisabled|Boolean|false|取消按钮是否禁止点击|",
      "|cancelText|String|\"取消\"|取消按钮文本|",
      "|confirmText|String|\"确认\"|确认按钮文本|",
      "|showFullscreen|Boolean|false|是否显示可全屏|",
      "|showFooter|Boolean|true|是否显示底部按钮|",
      "|cancelThrottleNumber|Number|1000|取消按钮节流|",
      "|confirmThrottleNumber|Number|1000|确定按钮节流|",
      "|border|Boolean|true|是否显示弹框标题下边线|",
      "|destroyOnClose|Boolean|true|关闭时是否销毁Dialog中的元素|",
      "|width|String|50%|Dialog的宽度|",
      "|top|String|15vh|Dialog CSS中的margin-top值|",
      "|append-to-body|Boolean|false|Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true|",
      "|close-on-click-modal|Boolean|true|是否可以通过点击 modal 关闭 Dialog|",
      "",
      "### 事件",
      "|事件名称|说明|回调参数|",
      "|---|---|---|",
      "|cancel|弹框取消按钮|-|",
      "|confirm|弹框确定按钮|-|",
      "",
      "### slot",
      "|名称|说明|参数|",
      "|---|---|---|",
      "|title|自定义弹框标题|-|",
      "|footer|自定义弹框底部按钮|-|",
      "",
      "3. 源码",
      "",
      "<template>",
      "  <div class=\"kd-dialog\">",
      "    <!-- :close-on-click-modal=\"mIsDev ? true : false\" -->",
      "    <el-dialog",
      "      v-el-drag-dialog",
      "      :fullscreen=\"fullscreen\"",
      "      :custom-class=\"getThemeClass\"",
      "      :destroy-on-close=\"destroyOnClose !== false\"",
      "      v-bind=\"$attrs\"",
      "      :width=\"$attrs.width || '640px'\"",
      "      :class=\"!border && 'hide-title-border'\"",
      "      v-on=\"$listeners\"",
      "    >",
      "      <template slot=\"title\">",
      "        <slot name=\"title\">",
      "          <div>{{ title }}</div>",
      "        </slot>",
      "        <button",
      "          v-if=\"showFullscreen\"",
      "          class=\"el-dialog__headerbtn dialog_fullscreen__icon\"",
      "          @click=\"fullscreen = !fullscreen\"",
      "        >",
      "          <i :class=\"fullscreen ? 'kd-icon-fullscreen-exit' : 'kd-icon-fullsreen'\"></i>",
      "        </button>",
      "      </template>",
      "      <div class=\"dialog_slot_box\">",
      "        <slot></slot>",
      "      </div>",
      "      <div v-if=\"showFooter\" slot=\"footer\" class=\"dialog_footer\">",
      "        <slot name=\"footer\">",
      "          <el-button",
      "            v-if=\"showCancel\"",
      "            v-throttle=\"cancelThrottleNumber\"",
      "            :type=\"cancelAttrs.type || 'info'\"",
      "            v-bind=\"cancelAttrs\"",
      "            @click=\"handleClose\"",
      "            >{{ cancelText }}</el-button",
      "          >",
      "          <el-button",
      "            v-if=\"showConfirm\"",
      "            v-throttle=\"confirmThrottleNumber\"",
      "            :type=\"confirmAttrs.type || 'primary'\"",
      "            v-bind=\"confirmAttrs\"",
      "            @click=\"confirmHandle\"",
      "            >{{ confirmText }}</el-button",
      "          >",
      "        </slot>",
      "      </div>",
      "    </el-dialog>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'KdDialog',",
      "  props: {",
      "    title: {",
      "      type: String,",
      "      default: '', // 弹框标题名称",
      "    },",
      "    theme: {",
      "      type: String,",
      "      default: '', // 弹框样式: 默认空, norm norm16 simple",
      "    },",
      "    cancel: {",
      "      type: [Function, String],",
      "      default: '', //",
      "    },",
      "    confirmDisabled: {",
      "      type: Boolean,",
      "      default: false, // 确认按钮是否禁止点击",
      "    },",
      "    cancelDisabled: {",
      "      type: Boolean,",
      "      default: false, // 取消按钮是否禁止点击",
      "    },",
      "",
      "    cancelText: {",
      "      type: String,",
      "      default: '取消',",
      "    },",
      "    confirmText: {",
      "      type: String,",
      "      default: '确认',",
      "    },",
      "    showFullscreen: {",
      "      type: Boolean,",
      "      default: false, // 是否显示可全屏",
      "    },",
      "    showFooter: {",
      "      type: Boolean,",
      "      default: true, // 是否显示底部操作按钮",
      "    },",
      "    showCancel: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    showConfirm: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    cancelThrottleNumber: {",
      "      type: Number,",
      "      default: 1000, // 取消按钮节流",
      "    },",
      "    confirmThrottleNumber: {",
      "      type: Number,",
      "      default: 2000,",
      "    },",
      "    border: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    destroyOnClose: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    confirmAttrs: {",
      "      type: Object,",
      "      default: () => ({}),",
      "    },",
      "    cancelAttrs: {",
      "      type: Object,",
      "      default: () => ({}),",
      "    },",
      "  },",
      "  data() {",
      "    return {",
      "      fullscreen: false,",
      "    };",
      "  },",
      "  computed: {",
      "    getThemeClass() {",
      "      if (this.theme === 'norm') {",
      "        return 'kd-norm-dialog';",
      "      } else if (this.theme === 'norm16') {",
      "        return 'kd-norm16-dialog';",
      "      } else if (this.theme === 'simple') {",
      "        return 'kd-simple-dialog';",
      "      } else {",
      "        return '';",
      "      }",
      "    },",
      "  },",
      "  watch: {",
      "    showDialog() {},",
      "  },",
      "  methods: {",
      "    confirmHandle() {",
      "      if (this.$listeners.confirm) {",
      "        this.$emit('confirm');",
      "      } else {",
      "        this.$emit('update:visible', false);",
      "      }",
      "    },",
      "    handleClose() {",
      "      if (this.$listeners.cancel) {",
      "        this.$emit('cancel');",
      "      } else {",
      "        this.$emit('update:visible', false);",
      "      }",
      "    },",
      "  },",
      "};",
      "</script>",
      "",
      "",
      ""
    ],
  },
  "kd-select": {
    "prefix": "kd-select简写",
    "body": [
      "<kd-select v-model=\"${1:selectValue}\" :options=\"${2:options}\" />$0"
    ],
    "description": [
      "<kd-select v-model=\"t1\" :options=\"['莎莎', '瑞瑞', '梅梅']\" type=\"simple\" />",
      "<kd-select",
      "  v-model=\"t1\"",
      "  title=\"简单的\"",
      "  block",
      "  :options=\"[",
      "    {",
      "      label: '莎莎',",
      "      value: 'ss',",
      "    },",
      "  ]\"",
      "/>",
      "<kd-select",
      "  title=\"复杂\"",
      "  v-model=\"t4\"",
      "  multiple",
      "  width=\"100\"",
      "  :options=\"[",
      "    {",
      "      name: '莎莎',",
      "      value2: 'ss',",
      "    },",
      "  ]\"",
      "  @changeSelect=\"changeSelect\"",
      "  :customLabel=\"(item) => `${item.name}(${item.value2})`\"",
      "  :default-props=\"{ label: 'name', value: 'value2' }\"",
      "/>",
      "",
      "width: 宽度.",
      "default-props: 默认value和label选项. ",
      "type: 默认为空, 如果为simple, 则可以使用简单的数组.",
      "customLabel: 自定义显示文本."
    ],
  },
  "jobTree": {
    "scope": "vue-html, html",
    "prefix": "jobTree",
    "body": [
      "<kd-job-tree ref=\"jobTreeRef\" :defaultProps=\"defaultProps\" :treeData=\"treeData\" @nodeHandler=\"nodeHandler\">",
      "      <template #data=\"{ data }\">",
      "        <div>{{ data.name }}</div>",
      "      </template>",
      "    </kd-job-tree>"
    ],
    "description": "kd-job-tree简写"
  },
  "kd-filter-table": {
    "scope": "vue-html, html",
    "prefix": "kd-filter-table简写",
    "body": [
      "<kd-filter-table",
      "  ref=\"tableRef\"",
      "  :data=\"tableData\"",
      "  :columns=\"columnsData\"",
      "  :total-num=\"totalNum\"",
      "  @updatePage=\"init\"",
      ">",
      "  <template #operation>",
      "    <el-button type=\"primary\" icon=\"el-icon-plus\" @click=\"newAdd\">",
      "      新建",
      "    </el-button>",
      "  </template>",
      "  <template #search=\"{ search }\">",
      "    <kd-input v-model=\"search.name\" title=\"任务英文名称\"></kd-input>",
      "  </template>",
      "</kd-filter-table>"
    ],
    "description": [
      "#### 全局属性",
      "1. 基础用法",
      "#1. 最常用用法",
      "<kd-filter-table",
      "  ref=\"tableRef\"",
      "  :data=\"tableData\"",
      "  :columns=\"columnsData\"",
      "  :total-num=\"totalNum\"",
      "  @updatePage=\"init\"",
      ">",
      "  <template #operation>",
      "    <el-button type=\"primary\" icon=\"el-icon-plus\" @click=\"newAdd\">",
      "      新建",
      "    </el-button>",
      "  </template>",
      "  <template #search=\"{ search }\">",
      "    <kd-input v-model=\"search.name\" title=\"任务英文名称\"></kd-input>",
      "  </template>",
      "</kd-filter-table>",
      "#2. 最简单用法, 无分页和搜索",
      "<kd-filter-table",
      "  ref=\"tableRef\"",
      "  :data=\"tableData\"",
      "  :columns=\"columnsData\"",
      "  :totalNum=\"totalNum\"",
      "  :showSearch=\"false\"",
      "  :pageFlag=\"false\"",
      "  @updatePage=\"init\"",
      "></kd-filter-table>",
      "#3. 支持多选和批量操作的用法",
      "<kd-filter-table",
      "  ref=\"tableRef\"",
      "  :data=\"tableData\"",
      "  :columns=\"columnsData\"",
      "  row-keys=\"name\"",
      "  :total-num=\"totalNum\"",
      "  @selectionChange=\"selectionChange\"",
      "  @updatePage=\"init\"",
      ">",
      "  <template #operation>",
      "    <kd-popover-button",
      "      :disabled=\"selectList.length === 0\"",
      "      :content-text=\"'确定要删除当前行吗?'\"",
      "      :referenceText=\"mBatchTitle('删除', selectList)\"",
      "      @confirm=\"deleteRow\"",
      "    ></kd-popover-button>",
      "    <el-button type=\"primary\" class=\"ml\" @click=\"deleteRow()\">",
      "      {{ mBatchTitle(\"移动\", selectList) }}",
      "    </el-button>",
      "  </template>",
      "  <template #search=\"{ search }\">",
      "    <kd-input v-model=\"search.name\" title=\"任务英文名称\"></kd-input>",
      "  </template>",
      "</kd-filter-table>",
      "2 属性",
      " |选项|类型|默认值|说明|",
      "|---|---|---|---|",
      "|data|Array|[]|表格数据|",
      "|columns|Array|[]|列描述数据对象|",
      "|totalNum|Number|0|总条数|",
      "|tableExpand|Boolean|true|允许全表切换是否展示全部内容（不用...显示）|",
      "|trExpand|Boolean|true|允许每行切换是否展示全部内容（不用...显示）|",
      "|searchTypes|Object|{}|筛选规则定义，默认是like：模糊，还有 eq：精确 in：数组 between：日期，比如：{owner: 'eq',endTime:'between'}表示owner列按照精确搜索，endTime列按照between搜索|",
      "|searchTitle|String|搜索关键字|关键字搜索title|",
      "|placeholder|String|请输入|关键字搜索placeholder|",
      "|showSearch|Boolean|true|是否显示头部搜索|",
      "|searchareaWidth|Number|1000|搜索栏宽度|",
      "|wordSearchFlag|Boolean|true|是否支持关键字筛选|",
      "|searchFlag|Boolean|true|是否支持精准筛选|",
      "|pageFlag|Boolean|true|是否包含分页|",
      "|stripe|Boolean|false|是否显示间隔斑马纹|",
      "|border|Boolean|false|是否显示纵向边框|",
      "|showOverflowTooltip|Boolean|true|内容过长时隐藏，鼠标悬浮显示tooltip|",
      "|loading|Boolean|false|表格loading|",
      "|maxHeight|Number|5000|表格最大高度，超出滚动|",
      "|rowKeys|String/Array|''|行数据的key，可以是数组，作为联合key|",
      "",
      "#### column属性",
      "|选项|类型|默认值|说明|",
      "|---|---|---|---|",
      "|title|String||列字段名|",
      "|key|String||列名|",
      "|filters|Array|[]|筛选项：eg:[{ text: '未物化', value: false }, { text: '已物化', value: true }]|",
      "|filter|Function||如果要显示的内容不是本列对应的字段值，可使用filter返回真正要显示的内容，eg:filter: (val, row) => row.showName|",
      "|useSlot|Boolean|false|如果某列显示逻辑复杂，可以使用插槽实现。|",
      "|render|Function||如果某列显示逻辑复杂，也可以使用render函数实现。|",
      "|width|Number||列宽度|",
      "|minWidth|Number||列最小宽度|",
      "|fixed|String/Boolean|false|'right' 右侧固定, true 默认左侧固定|",
      "|sortable|Boolean|false|是否可排序|",
      "|headerAlign|String|left|el-table原生属性|",
      "|align|String|left|el-table原生属性|",
      "|type|String|''|el-table原生属性，可以配置index selection等|",
      "|tooltipFlag|Boolean|false|是否显示自带的tooltip，可以配合useSlot或render函数设置本列自己的tooltip|",
      "|handler|Function||本列点击事件函数，配置后，本列内容自动加上链接样式|",
      "|maxBtns|Number|2|只能配置在操作那一列，最多显示几个操作按钮，超出此个数需要点击...才能看到更多按钮|",
      "|isTxtButton|Boolean|true|true：表示使用文字按钮 false：表示使用icon按钮|",
      "|popoverTitle|String|'删除'|点击按钮需要弹出确认弹框时，指定弹框的标题|",
      "|confirmInfo|String|''|有的按钮点击后有确认信息提示，确认框点击后确认后才执行handler|",
      "|filterPlacement|String|'bottom-end'|el-column原生属性|",
      "|filterMethod|Function|\\|el-column原生属性|",
      "|headerSlot|String|''|表头自定义插槽|",
      "|headerTooltipText|String|''|移入表头文字提示|",
      "|filteredValue|String|''|el-column原生属性|",
      "|isShow|Boolean|true|列是否显示|",
      "",
      "### 方法（ref调用）",
      "|方法名称|说明|参数|",
      "|---|---|---|",
      "|clearSelection|清空表格选中项|无|",
      "|refreshTableData|刷新表格，不改变筛选条件和分页|无|",
      "|initTableData|初始化表格数据|无|"
    ]
  },
  "kd-tooltip": {
    "scope": "vue-html, html",
    "prefix": "kd-tooltip简写",
    "body": [
      "<kd-tooltip content=\"测试tooltip\" width=\"100px\" />",
    ],
    "description": [
      "",
      "#1. 用法",
      "1. icon用法",
      "<kd-tooltip content=\"使用icon\" :slot-show=\"true\">",
      "   <kd-icon name=\"kd-icon-error-circle-filled\" size=\"18\" default-color=\"var(--blue)\"></kd-icon>",
      "</kd-tooltip>",
      " ",
      "#2. 属性",
      " ### 组件接收参数",
      " 参数 | 说明 | 类型 | 默认值",
      " :---:|:---:|:---:|:---:",
      " width|文字容器的宽度，可以设置%、px、calc()，百分比需要父容器设置宽度|string|100%",
      " slotShow|是否使用插槽,这里使用的是匿名插槽|boolean|false",
      " placement|Tooltip的出现位置|String|bottom",
      " disabled|Tooltip 是否可用|Boolean|false",
      "",
      " #3. 源码",
      " <template>",
      "  <el-tooltip effect=\"dark\" :disabled=\"isShowTooltip\" :placement=\"placement\" v-bind=\"$attrs\">",
      "    <span",
      "      v-if=\"!slotShow\"",
      "      class=\"hide-text\"",
      "      :style=\"{ maxWidth: width }\"",
      "      v-on=\"$listeners\"",
      "      @mouseover=\"onMouseOver('str')\"",
      "    >",
      "      <span ref=\"str\">{{ $attrs.content }}</span>",
      "    </span>",
      "    <slot></slot>",
      "  </el-tooltip>",
      "</template>",
      "",
      "<script>",
      "// <kd-tooltip width=\"380px\" class=\"right_bg\" :text=\"activeEntity.name\" />",
      "export default {",
      "  name: 'KdTooltip',",
      "  components: {},",
      "  props: {",
      "    width: {",
      "      // 超过此宽度省略号显示",
      "      type: String,",
      "      default: () => {",
      "        return '100%';",
      "      },",
      "    },",
      "    slotShow: {",
      "      // 是否显示插槽",
      "      type: Boolean,",
      "      default: () => {",
      "        return false;",
      "      },",
      "    },",
      "    placement: {",
      "      type: String,",
      "      default: 'top',",
      "    },",
      "  },",
      "  data() {",
      "    return {",
      "      isShowTooltip: false,",
      "    };",
      "  },",
      "  methods: {",
      "    onMouseOver(str) {",
      "      if (this.slotShow) return;",
      "      // 内容超出，显示文字提示内容",
      "      const tag = this.$refs[str];",
      "      if (!tag) return;",
      "      const parentWidth = tag.parentNode.offsetWidth; // 获取元素父级可视宽度",
      "      const contentWidth = tag.offsetWidth; // 获取元素可视宽度",
      "      this.isShowTooltip = contentWidth <= parentWidth;",
      "    },",
      "  },",
      "};",
      "</script>"
    ],
  },
  "kd-empty": {
    "prefix": "kd-empty简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-empty />"
    ],
    "description": [
      "#1. 用法",
      "1. 替换图片1",
      "<kd-empty width=\"100\" title=\"无返回!\" :img=\"require('@/assets/404_images/404.png')\"></kd-empty>",
      "2. 替换图片2: script中引入图片",
      "<kd-empty :img=\"img2\"></kd-empty>",
      "const img2 = require(\"@/assets/404_images/404_cloud.png\");",
      "#2. 属性",
      "#### 全局属性",
      "|选项|类型|默认值|说明|",
      "|---|---|---|---|",
      "|img|String|\"group_null\"|显示图片|",
      "|width|String/Number|\"100px|图片宽度|",
      "|title|String|\"暂无数据\"|显示文字|",
      "#3. 源码",
      "<template>",
      "  <div class=\"kd-empty\">",
      "    <div>",
      "      <img :src=\"img\" :style=\"{ ...mHandleWidth() }\" alt=\"\" />",
      "      <p>{{ title }}</p>",
      "    </div>",
      "  </div>",
      "</template>",
      "<script>",
      "import group_null from './img/group_null.png';",
      "export default {",
      "  name: 'KdEmpty',",
      "  props: {",
      "    img: {",
      "      type: String,",
      "      default: () => {",
      "        return group_null;",
      "      },",
      "    },",
      "    width: {",
      "      type: [String, Number],",
      "      default: () => {",
      "        return '100px';",
      "      },",
      "    },",
      "    title: {",
      "      type: String,",
      "      default: '暂无数据',",
      "    },",
      "  },",
      "};",
      "</script>"
    ],
  },
  "kd-title": {
    "scope": "vue-html, html",
    "prefix": "kd-title简写",
    "body": [
      "<kd-title title=\"$1\"></kd-title>$0"
    ],
    "description": [
      "#1. 用法",
      "1. 最常用大部分属性",
      "<kd-title",
      "  title=\"我是title测试\"",
      "  subTitle=\"只是本地显示\"",
      "  style=\"--lc: red; margin-bottom: 30px\"",
      "  class=\"bd-b-1\"",
      "  size=\"none\"",
      ">",
      "  <span class=\"ml2 cl-blue\"> 这是默认插槽 </span>",
      "  <template #right>",
      "    <div class=\"f\">",
      "      <el-button>这是右侧插槽的值1</el-button>",
      "      <el-button>这是右侧插槽的值2</el-button>",
      "    </div>",
      "  </template>",
      "</kd-title>",
      "",
      "#2. 属性",
      "### 组件接收参数",
      "属性 | 说明 | 类型 | 默认值",
      "--- | :---| :---| :---",
      "title |  title的文字 | String | ",
      "color | 左侧竖条颜色| String | ",
      "customStyle | 文字的自定义style样式| Object | {}",
      "size | 上下margin间距；可选值(none：\"0\"; small：\"8px 0\"; large：\"24px 0\" ) | String | ''",
      " ### 组件插槽",
      "属性 | 说明  ",
      "--- | :---",
      "—— |  title文字靠右的插槽（匿名插槽） ",
      "right | 最右侧插槽",
      "",
      "#3.源码",
      "<template>",
      "  <div class=\"kd-title\" :style=\"{ ...handleMargin, ...customStyle }\">",
      "    <div ref=\"titleRef\" class=\"kd-left-title\">",
      "      <div>",
      "        <span>{{ title }}</span>",
      "        <span v-if=\"mIsDev && subTitle\" class=\"m-l-4 cl-blue\">({{ subTitle }})</span>",
      "      </div>",
      "      <slot></slot>",
      "    </div>",
      "    <slot name=\"right\"></slot>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "/**",
      "* 公共title组件。可以设置title,  可以设置左侧竖条颜色, 可设置默认插槽和右侧插槽",
      "* @使用方法",
      "<kd-title title=\"4. 回到顶部\"></kd-title>",
      "<kd-title ttitle=\"左侧粉色\" style=\"--lc: pink\"/>",
      "<kd-title",
      "  title=\"我是title测试\"",
      "  subTitle=\"只是本地显示\"",
      "  style=\"--lc: red; margin-bottom: 30px\"",
      "  class=\"bd-b-1\"",
      "  size=\"none\"",
      ">",
      "  <span class=\"ml2 cl-blue\"> 这是默认插槽 </span>",
      "  <template #right>",
      "    <div class=\"f\">",
      "      <el-button>这是右侧插槽的值1</el-button>",
      "      <el-button>这是右侧插槽的值2</el-button>",
      "    </div>",
      "  </template>",
      "</kd-title>",
      "*/",
      "export default {",
      "  name: 'KdTitle',",
      "  components: {},",
      "  props: {",
      "    title: {",
      "      type: String,",
      "      default: '',",
      "    },",
      "    customStyle: {",
      "      type: Object,",
      "      default: () => {},",
      "    },",
      "    size: {",
      "      type: String,",
      "      default: '', // 默认margin 16px 0",
      "    },",
      "    // 本地开发. 用来对文件命名. 可以快速定位到文件的名字",
      "    subTitle: {",
      "      type: String,",
      "      default: '',",
      "    },",
      "  },",
      "  data() {",
      "    return {};",
      "  },",
      "  computed: {",
      "    handleMargin() {",
      "      if (this.size === 'none') {",
      "        return { margin: '0' };",
      "      } else if (this.size === 'small') {",
      "        return { margin: '8px 0' };",
      "      } else if (this.size === 'large') {",
      "        return { margin: '24px 0' };",
      "      } else {",
      "        return {};",
      "      }",
      "    },",
      "  },",
      "  watch: {},",
      "  created() {},",
      "  mounted() {},",
      "  methods: {},",
      "};",
      "</script>",
      "",
    ],
  },
  "el-form": {
    "prefix": "el-form简写",
    "scope": "vue-html, html",
    "body": [
      "<el-form ref=\"formRef\" :model=\"${1:form}\" :rules=\"${2:rules}\">",
      "  <el-form-item label=\"${3:名称}\" prop=\"${4:name}\">",
      "    <kd-input v-model=\"${1:form}.${4:name}\" />",
      "  </el-form-item>",
      "</el-form>"
    ],
    "description": [
      "#1. css三列布局",
      "::v-deep .el-form {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "}",
      "::v-deep .el-form-item {",
      "  width: 33.33% !important;",
      "}",
      "",
      "#2. el-row三列布局",
      "<el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\">",
      "  <el-row>",
      "    <el-col span=\"8\">",
      "      <el-form-item label=\"名称\" prop=\"name\">",
      "        <kd-input v-model=\"form.name\" />",
      "      </el-form-item>",
      "    </el-col>",
      "  </el-row>",
      "</el-form>"
    ]
  },
  "el-row": {
    "prefix": "el-row简写",
    "scope": "vue-html, html",
    "body": [
      "<el-row>",
      "  <el-col :span=\"8\">$0</el-col>",
      "</el-row>"
    ],
    "description": [
      ""
    ],
  },
  "rules": {
    "prefix": "rules简写",
    "scope": "",
    "body": [
      "rules: {",
      "  name: [this.mBlurRequired()],",
      "},"
    ],
    "description": [
      "1. 自定义规则 ",
      "rules: {",
      "  age: [this.mChangeRequired()],",
      "  name: [this.mBlurRequired(), { validator: this.validateName, trigger: [\"blur\"] }]",
      "},",
      "async validateName(rule, value, callback) {",
      "  let validFlag = /^(?!_)(?!.*?_$)[a-zA-Z0-9_\\u4e00-\\u9fa5]+$/.test(value);",
      "  if (!validFlag) {",
      "    callback(new Error(\"由中文、英文、数字、下划线组成，且不能以下划线开头和结尾\"));",
      "  } else {",
      "    let { name, sourceId } = this.form;",
      "    let params = { name, sourceId };",
      "    let res = await checkFileName(params);",
      "    if (res === true) {",
      "      callback(new Error(\"分类名称重复\"));",
      "    } else {",
      "      callback();",
      "    }",
      "  }",
      "},"
    ],
  },
  "kd-date-range": {
    "prefix": "kd-date-range简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-date-range v-model=\"${1:dateValue}\" />$0"
    ],
    "description": [
      "#1. 用法",
      "1. 常用属性用法",
      "<kd-date-range v-model=\"dateValue\" title=\"日期选项\" width=\"300\" future-disabled></kd-date-range>",
      "#2. 属性",
      "### 组件接收参数",
      "参数 | 说明 |   类型    | 默认值",
      ":---:|:--:|:-------:|:---:",
      "title|  左侧标题  | String  | 无",
      "width| 宽度| 支持mHandleWidth | 424",
      "futureDisabled| 只能选择今天和以前的时间 | Boolean |false",
      "",
      "剩余参数参考DateTimePicker https://element.eleme.cn/#/zh-CN/component/date-picker 组件直接传值就可以.",
      "#3. 源码",
      "<template>",
      "  <div class=\"kd-daterange\" :style=\"{ ...mHandleWidth() }\">",
      "    <span v-if=\"title\" class=\"left_box\">{{ title }}</span>",
      "    <el-date-picker",
      "      v-model=\"rangeVal\"",
      "      class=\"right_box\"",
      "      :size=\"$attrs.size || 'small'\"",
      "      :default-time=\"$attrs['default-time'] || ['00:00:00', '23:59:59']\"",
      "      type=\"datetimerange\"",
      "      :value-format=\"$attrs['default-time'] || 'yyyy-MM-dd HH:mm:ss'\"",
      "      :start-placeholder=\"$attrs.disabled ? '' : $attrs['start-placeholder'] || '请选择日期'\"",
      "      :end-placeholder=\"$attrs.disabled ? '' : $attrs['end-placeholder'] || '请选择日期'\"",
      "      :picker-options=\"mergePickerOptions\"",
      "      v-bind=\"$attrs\"",
      "      v-on=\"$listeners\"",
      "      @change=\"dateChange\"",
      "    ></el-date-picker>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'KdDateRange',",
      "  props: {",
      "    value: {",
      "      type: Array,",
      "      default: () => [],",
      "    },",
      "    title: {",
      "      type: String,",
      "      default: '',",
      "    },",
      "    // 只能选择现在现在以前的时间",
      "    futureDisabled: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "    width: {",
      "      type: [String, Number],",
      "      default: '',",
      "    },",
      "  },",
      "  data() {",
      "    const oneDay = 3600 * 1000 * 24;",
      "    const end = new Date();",
      "    return {",
      "      pickerOptions: {",
      "        // 时间选择器时间段",
      "        shortcuts: [",
      "          {",
      "            text: '今天',",
      "            onClick(picker) {",
      "              const start = new Date(new Date(new Date().toLocaleDateString()).getTime());",
      "              picker.$emit('pick', [start, end]);",
      "            },",
      "          },",
      "          {",
      "            text: '昨天',",
      "            onClick(picker) {",
      "              const start = new Date(new Date(new Date().toLocaleDateString()).getTime() - oneDay);",
      "              const yesEnd = new Date(new Date(new Date().toLocaleDateString()).getTime() - 1);",
      "              picker.$emit('pick', [start, yesEnd]);",
      "            },",
      "          },",
      "          {",
      "            text: '最近一周',",
      "            onClick(picker) {",
      "              const start = new Date(new Date(new Date().toLocaleDateString()).getTime() - oneDay * 6);",
      "              picker.$emit('pick', [start, end]);",
      "            },",
      "          },",
      "          {",
      "            text: '本月',",
      "            onClick(picker) {",
      "              const start = new Date(new Date(new Date().toLocaleDateString()).setDate(1));",
      "              picker.$emit('pick', [start, new Date()]);",
      "            },",
      "          },",
      "          {",
      "            text: '最近一个月',",
      "            onClick(picker) {",
      "              const start = new Date();",
      "              start.setTime(start.getTime() - oneDay * 30);",
      "              picker.$emit('pick', [start, end]);",
      "            },",
      "          },",
      "          {",
      "            text: '最近三个月',",
      "            onClick(picker) {",
      "              const start = new Date();",
      "              start.setTime(start.getTime() - oneDay * 90);",
      "              picker.$emit('pick', [start, end]);",
      "            },",
      "          },",
      "        ],",
      "      },",
      "    };",
      "  },",
      "  computed: {",
      "    // pickerOptions有多个参数. 如果传递了这个参数, 合并现有的属性.",
      "    mergePickerOptions() {",
      "      if (this.$attrs['picker-options']) {",
      "        return Object.assign(this.pickerOptions, this.$attrs['picker-options']);",
      "      } else {",
      "        // 如果futureDisabled为true, 不能选择将来的日期",
      "        if (this.futureDisabled) {",
      "          let res = Object.assign(this.pickerOptions, {",
      "            disabledDate: this.disabledDate,",
      "          });",
      "          return res;",
      "        }",
      "        return this.pickerOptions;",
      "      }",
      "    },",
      "    rangeVal: {",
      "      get() {",
      "        if (this.value && this.value.length) {",
      "          return this.value;",
      "        } else {",
      "          return '';",
      "        }",
      "      },",
      "      set(v) {",
      "        this.$emit('input', v);",
      "      },",
      "    },",
      "  },",
      "  methods: {",
      "    dateChange(v) {",
      "      this.$emit('input', v);",
      "    },",
      "    disabledDate(date) {",
      "      const newDate = new Date().getTime();",
      "      const checkDate = new Date(date).getTime();",
      "      if (checkDate < newDate) {",
      "        return false;",
      "      }",
      "      return true;",
      "    },",
      "  },",
      "};",
      "</script>"
    ],
  },
  "el-form-item": {
    "prefix": "el-form-item简写",
    "scope": "vue-html, html",
    "body": [
      "<el-form-item label=\"$1\" prop=\"$2\">",
      "  $0",
      "</el-form-item>"
    ],
    "description": "item"
  },
  "p": {
    "prefix": "placeholder简写",
    "scope": "vue-html, html",
    "body": [
      "placeholder=\"$1\" $0"
    ],
    "description": "placeholder简写"
  },
  "async": {
    "scope": "javascript",
    "prefix": "async简写",
    "body": [
      "async ${1:${CLIPBOARD}}() {",
      "    let res = await ${2:${1:${CLIPBOARD}}}();",
      "    this.${3:tableData} = res;",
      "},"
    ],
    "description": "async await 生成请求方法"
  },
  "import": {
    "scope": "javascript",
    "prefix": "import快速导入",
    "body": [
      "import {${1:${CLIPBOARD}}} from \"@/server/$0\";"
    ],
    "description": ""
  },
  "emit": {
    "prefix": "emit简写",
    "scope": "javascript, typescript",
    "body": [
      "this.\\$emit(\"${1:update}\");"
    ],
    "description": "this.$emit(\"update:visible\")"
  },
  "$refs": {
    "prefix": "$refs快速导入",
    "scope": "javascript, typescript",
    "body": [
      "this.\\$refs.${1:${CLIPBOARD}}.${2:open()};"
    ],
    "description": "this.$refs"
  },
  "options": {
    "prefix": "options简写",
    "scope": "javascript, typescript",
    "body": [
      "options: [",
      "  {label: '小月月', value: 'xyy'},",
      "  {label: '小鑫鑫', value: 'xxx'}",
      "],"
    ],
    "description": [
      "#1. 常用测试数据",
      "1. 树形结构",
      "treeData: [",
      "  {",
      "    label: \"一级 1\",",
      "    id: 1,",
      "    children: [",
      "      {",
      "        label: \"二级 1-1\",",
      "        id: 11,",
      "        parentId: 1,",
      "        children: [",
      "          {",
      "            id: 111,",
      "            parentId: 11,",
      "            label: \"三级 1-1-1\"",
      "          }",
      "        ]",
      "      }",
      "    ]",
      "  },",
      "  {",
      "    label: \"一级 2\",",
      "    id: 2,",
      "    children: [",
      "      {",
      "        label: \"二级 2-1\",",
      "        id: 21,",
      "        parentId: 2,",
      "        children: [",
      "          {",
      "            parentId: 21,",
      "            id: 211,",
      "            label: \"三级 2-1-1\"",
      "          }",
      "        ]",
      "      },",
      "      {",
      "        label: \"二级 2-2\",",
      "        id: 22,",
      "        parentId: 2,",
      "        disable: true,",
      "      }",
      "    ]",
      "  }",
      "],"
    ]
  },
  "vueFilterTable": {
    "prefix": "vueFilterTable简写",
    "body": [
      "<template>",
      "  <div>",
      "    <kd-filter-table",
      "      ref=\"tableRef\"",
      "      :data=\"tableData\"",
      "      :columns=\"columnsData\"",
      "      :total-num=\"totalNum\"",
      "      @selection-change=\"selectionChange\"",
      "      @updatePage=\"init\"",
      "    >",
      "      <template #operation>",
      "        <kd-popover-button",
      "          :disabled=\"selectList.length === 0\"",
      "          :content-text=\"'确定要删除当前行吗?'\"",
      "          :referenceText=\"mBatchTitle('删除', selectList)\"",
      "          @confirm=\"deleteRow\"",
      "        ></kd-popover-button>",
      "        <el-button type=\"primary\" class=\"ml\" @click=\"deleteRow()\">",
      "          {{ mBatchTitle(\"移动\", selectList) }}",
      "        </el-button>",
      "      </template>",
      "      <template #search=\"{ search }\">",
      "        <kd-input v-model=\"search.name\" title=\"任务英文名称\"></kd-input>",
      "      </template>",
      "    </kd-filter-table>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: \"${TM_FILENAME_BASE/(.)/${1:/upcase}/}\",",
      "  components: {},",
      "  props: {},",
      "  data() {",
      "    return {",
      "      tableData: [",
      "        { name: \"andy\", status: 1, id: 1 },",
      "        { name: \"andy2\", status: 0, id: 2 },",
      "        { name: \"andy3\", status: 0, id: 3 },",
      "      ],",
      "      totalNum: 0,",
      "      selectList: [],",
      "    };",
      "  },",
      "  computed: {",
      "    columnsData() {",
      "      return [",
      "        {",
      "          type: \"selection\",",
      "          selectableFn: (row, index) => {",
      "            return index % 2 === 0;",
      "          },",
      "        },",
      "        {",
      "          title: \"任务英文名称\",",
      "          key: \"name\",",
      "        },",
      "        {",
      "          title: \"任务状态\",",
      "          key: \"status\",",
      "          width: 1000,",
      "          filter: (key, row) => {",
      "            return row.status === 0 ? \"否\" : \"是\";",
      "          },",
      "          filters: [",
      "            { text: \"是\", value: 1 },",
      "            { text: \"否\", value: 0 }",
      "          ],",
      "        },",
      "        {",
      "          key: \"operation\",",
      "          title: \"操作\",",
      "          fixed: \"right\",",
      "          btns: [",
      "            {",
      "              content: \"编辑\",",
      "              handler: this.editRow,",
      "            },",
      "            {",
      "              content: \"删除\",",
      "              disabled: (row) => this.mDisabled(\"UPDATE\", row),",
      "              confirm: this.deleteRow,",
      "              confirmInfo: \"您确定要删除此文件嘛? \",",
      "            },",
      "          ],",
      "        },",
      "      ];",
      "    },",
      "  },",
      "  watch: {},",
      "  created() {",
      "    this.init();",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    editRow(row) {",
      "      console.log(\"row\", row);",
      "    },",
      "    init() {",
      "      this.totalNum = this.tableData.length;",
      "      console.log(\"init初始化\");",
      "    },",
      "    deleteRow(row) {",
      "      console.log(\"row\", row);",
      "    },",
      "    selectionChange(val) {",
      "      this.selectList = val;",
      "    },",
      "  },",
      "};",
      "</script>",
      ""
    ],
    "description": "vueFilterTable简写"
  },
  "columnsData": {
    "prefix": "columnsData简写",
    "scope": "javascript, typescript",
    "body": [
      "columnsData: [",
      "  {",
      "    title: \"序号\",",
      "    width: 60,",
      "    render: (h, params) => h(\"span\", {}, params.index + 1)",
      "  },",
      "  {",
      "    title: \"中文名称\",",
      "    key: \"name\",",
      "  },",
      "  {",
      "    key: \"operation\",",
      "    title: \"操作\",",
      "    fixed: \"right\",",
      "    btns: [",
      "      {",
      "        content: \"编辑\",",
      "        handler: this.editRow,",
      "      },",
      "      {",
      "        content: \"删除\",",
      "        confirm: this.deleteRow,",
      "        confirmInfo: \"您确定要删除此文件嘛? \",",
      "      },",
      "    ],",
      "  },",
      "],"
    ],
    "description": [
      "      ",
      "// 最简单的columnsData",
      "columnsData: [",
      "  {",
      "    title: \"中文名称\",",
      "    key: \"name\",",
      "  },",
      "  {",
      "    key: \"operation\",",
      "    title: \"操作\",",
      "    fixed: \"right\",",
      "    btns: [",
      "      {",
      "        content: \"编辑\",",
      "        handler: this.editRow,",
      "      },",
      "      {",
      "        content: \"删除\",",
      "        confirm: this.deleteRow,",
      "        confirmInfo: \"您确定要删除此文件嘛? \",",
      "      },",
      "    ],",
      "  },",
      "],",
      "",
      "// 在computed中",
      "columnsData() {",
      "  return [",
      "    {",
      "      type: \"selection\",",
      "      selectableFn: (row, index) => {",
      "        return index % 2 === 0;",
      "      }",
      "    },",
      "    {",
      "      title: \"任务英文名称\",",
      "      key: \"name\"",
      "    },",
      "    {",
      "      title: \"任务状态\",",
      "      key: \"status\",",
      "      width: 1000,",
      "      filter: (key, row) => {",
      "        return row.name;",
      "      },",
      "      filters: [",
      "        { text: \"是\", value: 1 },",
      "        { text: \"否\", value: 0 }",
      "      ],",
      "      useSlot: true,",
      "      render: (h, params) => {",
      "        return h(\"span\", {}, params.row.status ? \"是\" : \"否\");",
      "      }",
      "    },",
      "    {",
      "      key: \"operation\",",
      "      title: \"操作\",",
      "      fixed: \"right\",",
      "      maxBtns: 4,",
      "      btns: [",
      "        {",
      "          content: \"编辑\",",
      "          handler: this.deleteRow,",
      "          isShow: (row) => {",
      "            return row.status === 'RUNNING';",
      "          },",
      "        },",
      "        {",
      "          content: \"删除\",",
      "          disabled: (row) => this.mDisabled(\"UPDATE\", row),",
      "          confirm: this.deleteRow,",
      "          confirmInfo: \"您确定要删除此文件嘛? \"",
      "        }",
      "      ]",
      "    }",
      "  ];",
      "},"
    ],
  },
  "iconfont": {
    "prefix": "iconfont简写",
    "body": [
      "<i class=\"iconfont icon-sousuo\"></i>"
    ],
    "description": "iconfont的简写"
  },
  "kd-popover-button": {
    "prefix": "kd-popover-button简写",
    "body": [
      "<kd-popover-button",
      "  :disabled=\"selectList.length === 0\"",
      "  :content-text=\"'确定要删除当前行吗?'\"",
      "  :reference-text=\"mBatchTitle('删除', selectList)\"",
      "  @confirm=\"deletePop()\"",
      "></kd-popover-button>"
    ],
    "description": [
      "# 1. 用法",
      "1. 自定义icon",
      "<kd-popover-button",
      "  content-text=\"确定暂停数据读取吗？\"",
      "  :popover-attrs=\"{ title: '是否暂停' }\"",
      "  confirm-text=\"暂停\"",
      "  cancel-text=\"不暂停\"",
      "  @confirm=\"popConfirm\"",
      ">",
      "  <template #reference>",
      "    <i class=\"el-icon-s-tools\"></i>",
      "  </template>",
      "</kd-popover-button>",
      "",
      "2. 下拉按钮组",
      "<kd-popover-button",
      "  type=\"dropdown\"",
      "  @btnsClick=\"onBtnsClick\"",
      "  :btn-list=\"[",
      "    {",
      "      label: '可视化创建API',",
      "      key: 'visual',",
      "    },",
      "    {",
      "      label: 'SQL创建API',",
      "      key: 'sql',",
      "      attrs: { disabled: true },",
      "    },",
      "  ]\"",
      ">",
      "  <el-button slot=\"reference\" type=\"primary\" icon=\"el-icon-plus\">新增API</el-button>",
      "</kd-popover-button>",
      "",
      "#2. 属性",
      "",
      "#### 触发按钮",
      "",
      "| 选项                          | 类型     | 默认值                                                                                                   | 说明                             |",
      "|-----------------------------|--------|-------------------------------------------------------------------------------------------------------|--------------------------------|",
      "| type                        | string | content                                                                                               | 组件展示类型                         |",
      "| popoverAttrs【type=content】  | Object | {placement: \"bottom\",title: \"删除\",width: 260,trigger: \"click\"}                                         | el-popover 的属性对象               |",
      "| popoverAttrs【type=dropdown】 | Object | {placement: \"bottom-end\",width: 143,trigger: \"click\",\"popper-class\": \"kd-popover-button\\_\\_dropdown\"} | el-popover 的属性对象               |",
      "| referenceBtnAttrs           | Object | {}                                                                                                    | 默认触发 popover 是一个按钮，该属性对象作用于该按钮 |",
      "| referenceText               | String | \"删除\"                                                                                                  | 触发按钮文本，使用 reference 插槽后该属性失效   |",
      "",
      "#### type=content（默认）时弹出框内容",
      "",
      "| 选项             | 类型      | 默认值     | 说明                                                              |",
      "|----------------|---------|---------|-----------------------------------------------------------------|",
      "| contentText    | String  | \"确定删除？\" | 内容文本                                                            |",
      "| contentStyles  | Object  | null    | 内容文本样式，默认是一个<p>标签                                               |",
      "| disConfirm     | Boolean | false   | popover 框确认按钮 disabled                                          |",
      "| confirmText    | String  | \"确认\"    | popover 框确认按钮文本                                                 |",
      "| cancelText     | String  | \"取消\"    | popover 框取消按钮文本                                                 |",
      "| loadingConfirm | Boolean | false   | 确认按钮是否显示 loading，如果为 true，则 confirm 事件方法要加一个 cb 回调函数，在方法结束时调用一下 |",
      "",
      "#### type=dropdown（下拉按钮组）时按钮组",
      "",
      "| 选项            | 类型     | 默认值           | 说明                                |",
      "|---------------|--------|---------------|-----------------------------------|",
      "| btnList       | array  | [\\<btnItem\\>] | 按钮组对象数组                           |",
      "| btnItem.label | string | ''            | 按钮名称                              |",
      "| btnItem.key   | string | ''            | 按钮 key，影响 v-for 的 key，以及点击按钮里回调参数 |",
      "| btnItem.attrs | object | {}            | 同 el-button 配置项                   |",
      "",
      "### 事件",
      "",
      "| 事件名称      | 说明                    | 回调参数                             |",
      "|-----------|-----------------------|----------------------------------|",
      "| confirm   | 点击确定按钮                |                                  |",
      "| cancel    | 点击取消按钮                |                                  |",
      "| btnsClick | type=dropdown 时点击按钮回调 | key，通过 btnList 中配置的该参数判断是哪个按钮被点击 |",
      "",
      "### slot",
      "",
      "| 名称        | 说明                                  | 参数  |",
      "|-----------|-------------------------------------|-----|",
      "| default   | 同 el-popover，Popover 内嵌 HTML 文本     |     |",
      "| reference | 同 el-popover，触发 Popover 显示的 HTML 元素 |     |",
      "",
      "#3. 源码",
      "<template>",
      "  <el-popover v-model=\"show\" v-bind=\"popAttrs\" class=\"kd-popover-button\" v-on=\"$listeners\">",
      "    <slot slot=\"reference\" name=\"reference\">",
      "      <el-button v-bind=\"referenceBtnAttrs\" :disabled=\"disabled\">",
      "        {{ referenceText }}",
      "      </el-button>",
      "    </slot>",
      "",
      "    <template v-if=\"type === 'content'\">",
      "      <slot slot=\"default\">",
      "        <p :style=\"contentStyles\">",
      "          {{ contentText }}",
      "        </p>",
      "      </slot>",
      "",
      "      <div style=\"text-align: right; margin: 16px 4px 4px 4px\">",
      "        <el-button type=\"info\" @click=\"cancel\">{{ cancelText }}</el-button>",
      "        <el-button type=\"primary\" :disabled=\"disConfirm\" :loading=\"loading\" @click=\"confirm\">",
      "          {{ confirmText }}",
      "        </el-button>",
      "      </div>",
      "    </template>",
      "    <template v-if=\"type === 'dropdown'\">",
      "      <el-button",
      "        v-for=\"item in btnList\"",
      "        :key=\"item.key\"",
      "        v-bind=\"item.attrs\"",
      "        class=\"kd-popover-button__dropdown-button\"",
      "        @click=\"btnsClick(item.key)\"",
      "        >{{ item.label }}</el-button",
      "      >",
      "    </template>",
      "  </el-popover>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'KdPopoverButton',",
      "  props: {",
      "    type: {",
      "      type: String,",
      "      default: 'content',",
      "      validator: function (value) {",
      "        return ['content', 'dropdown'].includes(value);",
      "      },",
      "    },",
      "    popoverAttrs: {",
      "      type: Object,",
      "      default: () => {},",
      "    },",
      "    referenceBtnAttrs: {",
      "      type: Object,",
      "      default: () => {",
      "        return {};",
      "      },",
      "    },",
      "    referenceText: {",
      "      type: String,",
      "      default: '删除',",
      "    },",
      "    disabled: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "    contentText: {",
      "      type: String,",
      "      default: '确定删除？',",
      "    },",
      "    contentStyles: {",
      "      type: Object,",
      "      default: () => {},",
      "    },",
      "    disConfirm: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "    confirmText: {",
      "      type: String,",
      "      default: '确定',",
      "    },",
      "    cancelText: {",
      "      type: String,",
      "      default: '取消',",
      "    },",
      "    loadingConfirm: {",
      "      type: Boolean,",
      "      default: false,",
      "    },",
      "    btnList: {",
      "      type: Array,",
      "      default: () => {",
      "        return [];",
      "      },",
      "    },",
      "  },",
      "  data() {",
      "    return {",
      "      show: false,",
      "      loading: false,",
      "    };",
      "  },",
      "  computed: {",
      "    popAttrs() {",
      "      let obj;",
      "      if (this.type === 'content') {",
      "        obj = {",
      "          placement: 'bottom',",
      "          title: '删除',",
      "          width: 260,",
      "          trigger: 'click',",
      "        };",
      "      }",
      "      if (this.type === 'dropdown') {",
      "        obj = {",
      "          placement: 'bottom-end',",
      "          width: 143,",
      "          trigger: 'hover',",
      "          'popper-class': 'kd-popover-button__dropdown',",
      "        };",
      "      }",
      "",
      "      return Object.assign(obj, this.popoverAttrs);",
      "    },",
      "  },",
      "  methods: {",
      "    confirm() {",
      "      if (this.loadingConfirm) {",
      "        this.loading = true;",
      "        this.$emit('confirm', (err) => {",
      "          if (!err) {",
      "            this.loading = false;",
      "            this.show = false;",
      "          }",
      "        });",
      "      } else {",
      "        this.show = false;",
      "        this.$emit('confirm');",
      "      }",
      "    },",
      "    cancel() {",
      "      this.show = false;",
      "      this.$emit('cancel');",
      "    },",
      "    btnsClick(key) {",
      "      this.$emit('btnsClick', key);",
      "    },",
      "  },",
      "};",
      "</script>",
      ""
    ],
  },
  "obj简写": {
    "prefix": "obj简写",
    "scope": "javascript, typescript",
    "body": [
      "obj: {",
      "  name: \"andy\",",
      "  age: 18,",
      "  arr: [1, 2, 3]",
      "},",
    ],
    "description": "object测试数据生成"
  },
  "g-dev简写": {
    "prefix": "g-dev简写",
    "scope": "vue-html, html",
    "body": [
      "<g-dev-title sub-title=\"${1:${RELATIVE_FILEPATH/src\\/views\\///}}\" type=\"top\"></g-dev-title>",
    ],
    "description": [
      ""
    ],
  },
  "kd-dev简写": {
    "prefix": "kd-dev简写",
    "scope": "vue-html, html",
    "body": [
      "<kd-dev sub-title=\"${1:${RELATIVE_FILEPATH/src\\/views\\///}}\"></kd-dev>",
    ],
    "description": [
      "快速生成当前文件的路径"
    ],
  },
  "sub-title简写": {
    "prefix": "sub-title",
    "scope": "",
    "body": [
      "sub-title=\"${1:${RELATIVE_FILEPATH/src\\/views\\///}}\"",
    ],
    "description": [
      ""
    ],
  },
  "dt": {
    "prefix": "dt",
    "scope": "javascript, typescript",
    "body": [
      "${1:${CLIPBOARD}}: true,",
      "$0"
    ],
    "description": "data-array的简写"
  },
  "dn": {
    "prefix": "dn",
    "scope": "javascript, typescript",
    "body": [
      "${1:${CLIPBOARD}}: 0,",
      "$0"
    ],
    "description": "data-number的简写"
  },
  "template": {
    "prefix": "template",
    "scope": "vue-html, html",
    "body": [
      "<template #${1:${CLIPBOARD}}>",
      "  $0",
      "</template>"
    ],
    "description": "template简写"
  },
  "n": {
    "prefix": "n",
    "scope": "",
    "body": [
      "${TM_FILENAME}"
    ],
    "description": "获取当前文件的名字"
  },
  "s": {
    "prefix": "s",
    "scope": "",
    "body": [
      "this.\\$store.${1|state,commit|}"
    ],
    "description": "获取当前文件的名字"
  },
  // "defaultProps": {
  //   "prefix": "defaultProps简写",
  //   "scope": "vue-html, html",
  //   "body": [
  //     "defaultProps"
  //   ],
  //   "description": "defaultProps简写"
  // },
  "settimeout": {
    "prefix": "settimeout简写",
    "scope": "javascript, typescript",
    "body": [
      "setTimeout(() => {",
      "   $0",
      "}, ${1:0});"
    ],
    "description": ""
  },
  "svg简写": {
    "prefix": "svg简写",
    "scope": "vue-html, html",
    "body": [
      "<svg width=\"80px\" height=\"80px\" aria-hidden=\"true\">",
      "  <use xlink:href=\"#icon-guanliyuan\" />",
      "</svg>"
    ],
    "description": [
      "",
      "#1. kj-svg的写法",
      "1. <kj-svg icon=\"jiaobiao\" size=\"16px\" />",
      "2. 属性: icon, size, color, className: 可以写一个className直接修改svg的class",
      "",
      "#2. kj-svg的源码",
      "<template>",
      "  <div v-if=\"isExternal\" :style=\"styleExternalIcon\" class=\"svg-external-icon svg-icon\" v-on=\"$listeners\"></div>",
      "  <svg v-else :class=\"svgClass\" :width=\"size\" :height=\"size\" :fill=\"color\" aria-hidden=\"true\" v-on=\"$listeners\">",
      "    <use :xlink:href=\"iconName\" />",
      "  </svg>",
      "</template>",
      "",
      "<script>",
      "/**",
      "* @描述",
      "* 公共svg的全局使用",
      "* @使用方法",
      "<kj-svg icon=\"password\"></kj-svg>",
      "<kj-svg",
      "  icon=\"eye\"",
      "  color=\"green\"",
      "  size=\"20px\"",
      "></kj-svg>",
      "<kjSvg",
      "  icon=\"eye-open\"",
      "  className=\"dd\"",
      "></kjSvg>",
      ".dd {",
      "  fill: orange;",
      "  width: 100px;",
      "  height: 100px;",
      "}",
      "<kj-svg",
      "  icon=\"eye-open\"",
      "  color=\"red\"",
      "  size=\"10em\"",
      "></kj-svg>  ",
      "* @param",
      "* icon: svg的名字",
      "* color: 颜色",
      "* size: 控制宽高。 宽高一致",
      "* iconClass: 传递给icon的class名字",
      "* @LastEditTime: 最后更新时间",
      "* 2022-06-30",
      "* @Author: andy凌云",
      "*/",
      "// doc: https://panjiachen.github.io/vue-element-admin-site/feature/component/svg-icon.html#usage",
      "",
      "export default {",
      "  name: \"KjSvg\",",
      "  props: {",
      "    icon: {",
      "      type: String,",
      "      required: true",
      "    },",
      "    className: {",
      "      type: String,",
      "      default: \"\"",
      "    },",
      "    size: {",
      "      type: String,",
      "      default: \"1em\"",
      "    },",
      "    color: {",
      "      type: String,",
      "      default: \"currentColor\"",
      "    }",
      "  },",
      "  computed: {",
      "    isExternal() {",
      "      return this.isExternalMethod(this.icon);",
      "    },",
      "    iconName() {",
      "      return `#icon-${this.icon}`;",
      "    },",
      "    svgClass() {",
      "      if (this.className) {",
      "        return \"svg-icon \" + this.className;",
      "      } else {",
      "        return \"svg-icon\";",
      "      }",
      "    },",
      "    styleExternalIcon() {",
      "      return {",
      "        mask: `url(${this.icon}) no-repeat 50% 50%`,",
      "        \"-webkit-mask\": `url(${this.icon}) no-repeat 50% 50%`",
      "      };",
      "    }",
      "  },",
      "  methods: {",
      "    isExternalMethod(path) {",
      "      return /^(https?:|mailto:|tel:)/.test(path);",
      "    }",
      "  }",
      "};",
      "</script>",
      "",
      "<style scoped lang=\"scss\">",
      "$dfColor: currentColor;",
      "",
      ".svg-icon {",
      "  // width: 1em;",
      "  // height: 1em;",
      "  // vertical-align: -0.15em;",
      "  // fill: currentColor;",
      "  overflow: hidden;",
      "}",
      "",
      ".svg-external-icon {",
      "  background-color: currentColor;",
      "  mask-size: cover !important;",
      "  display: inline-block;",
      "}",
      "</style>",
      ""
    ]
  },
  "el-descriptions": {
    "prefix": "el-descriptions简写",
    "scope": "vue-html, html",
    "body": [
      "<el-descriptions>",
      "  <el-descriptions-item label=\"${1:左侧}\">${2:右侧}</el-descriptions-item>",
      "</el-descriptions>"
    ],
    "description": "descriptions"
  },
  "request": {
    "prefix": "request简写",
    "scope": "javascript, typescript",
    "body": [
      "request({",
      "  url: `${1:${CLIPBOARD}}`,",
      "});",
    ],
    "description": [
      "#1. 用法",
      "1. get请求params传参",
      "return request({",
      "  url: \"/file/classify\",",
      "  params",
      "});",
      "2. post请求",
      "return request({",
      "  data: params,",
      "  method: \"post\"",
      "});",
      "3. 删除相关, ids为数组",
      "return request({",
      "  data: ids,",
      "  method: \"delete\"",
      "});",
      "4. showLoading相关",
      "+ 1. vuex加loading",
      ":loading=\"$store.state.sLoading1\"",
      ":loading=\"$store.state.sConfirmLoading\"",
      "request({",
      "  showLoading: 'sLoading1', // 单个",
      "  showLoading: ['sLoading1', 'sConfirmLoading'], // 多个",
      "})",
      "+ 2. element元素加loading",
      "request({",
      "  showLoading: '#name', // 单个",
      "})",
      "5. 下载相关",
      "import {instance} from \"@/utils/request\";",
      "async downloadFile(v) {",
      "  const url = `${window.location.origin}${instance.defaults.baseURL}/file/download/${v.id}`;",
      "  window.open(url);",
      "}",
      "6. formData相关, 由于request内部会遍历传入的data, 所以data正常传递即可, 不用转成formData格式",
      "request({",
      "  headers: {",
      "    \"content-type\": \"multipart/form-data\"",
      "  },",
      "  data: params",
      "})",
      "#2. 属性",
      "original: 是否在拦截器中返回服务服的原始数据(response.data), 如果未true, 则拦截到response, 默认false",
      "showError: 是否把错误信息以message的形式显示在页面上, 默认true",
      "return request({",
      "  url: 'logout',",
      "  method: 'post',",
      "  baseURL: process.env.NODE_ENV === \"development\" ? \"/gaea3/api\" : \"/gaea/api\",",
      "  data: params,",
      "  original: false, ",
      "  headers: {",
      "    \"content-type\": \"multipart/form-data\"",
      "  },",
      "  showLoading: 'sLoading1',",
      "})"
    ],
  },
  "false简写": {
    "prefix": "false简写",
    "scope": "vue-html, html",
    "body": [
      ":${1:${CLIPBOARD}}=\"false\""
    ],
    "description": "函数快捷方式"
  },
  "fori": {
    "prefix": "fori循环",
    "scope": "javascript, typescript",
    "body": [
      "for (let i = 0; i < ${1:10}; i++) {",
      "  $0",
      "}"
    ],
    "description": [
      "fori循环快速生成"
    ],
  },
  "uu": {
    "prefix": [
      "uu简介",
      "你干嘛哈哈"
    ],
    "body": [
      ":${1:${CLIPBOARD}}=\"false\""
    ],
    "description": "函数快捷方式"
  },
  "#ifndef HEADER … #define … #endif": {
    "prefix": "defheader",
    "body": "#ifndef ${1:${TM_FILENAME/(.*)\\.C$/${1}_H/i}} \n#define $1 \n${2:header content}\n#endif\t// $1"
  },
  // css相关 ===========================================
  "tc简写": {
    "prefix": "tc简写",
    "scope": "css,scss",
    "body": [
      "text-align: center;"
    ],
  },
  "::v-deep": {
    "prefix": "::v-deep简写",
    "scope": "css,scss",
    "body": [
      "::v-deep ${1:${CLIPBOARD}}"
    ],
    "description": [
      ""
    ],
  },
  "tr简写": {
    "prefix": "tr简写",
    "scope": "css,scss",
    "body": [
      "text-align: right;"
    ],
  },
  "tl简写": {
    "prefix": "tl简写",
    "scope": "css,scss",
    "body": [
      "text-align: left;"
    ],
  },
}